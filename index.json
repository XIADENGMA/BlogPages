[{"content":"","date":"2024年12月17日","externalUrl":null,"permalink":"/tags/ai/","section":"Tags","summary":"","title":"AI","type":"tags"},{"content":" 0. 写在开头 # 仅用于记录部署流程，用户名username、项目名projectname、文件夹名等信息均为示例，实际部署时请根据实际情况全局替换。\n用户名：username 项目名：projectname 1. 装配好服务器硬件并安装系统及基础环境 # 装配好服务器硬件，连接好电源、网线等外部设备 安装 Ubuntu20.04 系统 镜像：ubuntu-20.04.6-desktop-amd64.iso 更新和其他软件：正常安装、安装 Ubuntu 时下载更新、安装第三方软件 安装类型：清除整个磁盘并安装 Ubuntu、选择系统盘 姓名：username 用户名：username 选中自动登录 安装完成后，拷贝项目文件夹压缩包到服务器，解压到/home/username/username文件夹下，重命名为projectname 再打开软件和更新的附加驱动，选中最新的驱动（应该是nvidia-driver-5xx），等待下载，安装完成后重启 2. 安装并设置conda # 下载 miniforge 并安装（ps：不知具体文件，见附件）\ncd /home/username/username/projectname chmod +x deploy/*.sh ./deploy/install_miniforge.sh 测试 conda 是否安装成功\n重新打开终端 echo \u0026#39;export PATH=\u0026#34;$HOME/miniforge3/bin:$PATH\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.bashrc conda -V 有类似conda xx.xx就说明conda安装成功 配置 conda 和 pip（[见附件]（ps：不知具体文件，见附件）\ncp deploy/.condarc /home/username/ mkdir -p /home/username/.config/pip/ cp deploy/pip.conf /home/username/.config/pip/ 3. 创建conda环境并安装项目依赖 # 请根据当前设备是否联网选择对应的安装方式\nps： 记得检查scripts内脚本是否为在 conda 指定环境运行：conda run -n projectname \u0026lt;正常命令\u0026gt;，没有则添加 ps: 记得检查scripts内脚本是否有export PATH=\u0026quot;/home/minifoge3/bin:$PATH\u0026quot; ，没有则添加 3.1 联网 # 创建 conda 环境（python 版本根据实际工程给定）\nconda create -n projectname python=3.9 conda activate projectname 安装项目依赖\ncd /home/username/username/projectname conda activate projectname pip install -r requirements.txt 检查包（有就说明无问题，无视出现ERROR: Pipe to stdout was broken）：\nconda activate projectname (conda list | head -n 5 ) \u0026amp;\u0026amp; echo \u0026#34;======\u0026#34; \u0026amp;\u0026amp; (pip list | head -n 5 ) 测试运行程序：\n启动程序： cd /home/username/username/projectname \u0026amp;\u0026amp; chmod +x ./scripts/*.sh \u0026amp;\u0026amp; ./scripts/projectnamedetimgstart.sh 等待程序完全启动后，在新终端中测试： conda activate projectname cd /home/username/username/projectname python test/test.py 查看logs文件夹下最新的以日期命名的.log文件：\ntail -f /home/username/username/projectname/logs/\u0026lt;修改为日期最新的那一个\u0026gt;.log 关闭程序：\ncd /home/username/username/projectname ./scripts/projectnamedetimgstop.sh 3.2 不联网 # 3.2.1 项目依赖打包 # 激活 projectname 环境：\nconda activate projectname ```shell 导出 conda 显式依赖列表：\nmkdir -p /home/username/projectname/extra \u0026amp;\u0026amp; conda list --explicit \u0026gt; /home/username/projectname/extra/conda_env.txt 导出 pip 包依赖列表：\npip freeze \u0026gt; /home/username/projectname/extra/pip_requirements.txt 下载 conda 包：\nmkdir -p /home/username/projectname/extra/conda_pkg \u0026amp;\u0026amp; wget -i /home/username/projectname/extra/conda_env.txt -P /home/username/projectname/extra/conda_pkg/ 下载 pip 包：\nmkdir -p /home/username/projectname/extra/pip_pkg \u0026amp;\u0026amp; pip download -r /home/username/projectname/extra/pip_requirements.txt -d /home/username/projectname/extra/pip_pkg/ 修改 conda 显式依赖文件conda_env.txt内包的路径为要安装的设备下的对应包位置的绝对路径\n3.2.2 本地开发环境测试 # 解压我发给你的压缩包，解压后文件夹应该是/home/username/projectname\n创建新的 conda 环境（输入y确认，一共2次）：\nconda create --name local_test --no-default-packages \u0026amp;\u0026amp; conda activate local_test 在新环境中安装 conda 包：\nconda install --name local_test --file /home/username/projectname/extra/conda_env_local.txt 安装 pip 包：\npip install --no-index --find-links /home/username/projectname/extra/pip_pkg/ -r /home/username/projectname/extra/pip_requirements.txt 检查包（有就说明无问题，无视出现ERROR: Pipe to stdout was broken）：\nconda activate projectname (conda list | head -n 5 ) \u0026amp;\u0026amp; echo \u0026#34;======\u0026#34; \u0026amp;\u0026amp; (pip list | head -n 5 ) 测试运行程序：\n启动程序： cd /home/username/projectname \u0026amp;\u0026amp; chmod +x ./scripts/*.sh \u0026amp;\u0026amp; ./scripts/projectnamedetimgstart.sh 等待程序完全启动后，在新终端中测试： conda activate projectname cd /home/username/projectname python test/test.py 查看logs文件夹下最新的以日期命名的.log文件：\ntail -f /home/username/projectname/logs/\u0026lt;修改为日期最新的那一个\u0026gt;.log 关闭程序：\ncd /home/username/projectname ./scripts/projectnamedetimgstop.sh 3.2.3 服务器部署 # 创建新的 conda 环境： conda create --name projectname --no-default-packages \u0026amp;\u0026amp; conda activate projectname 在新环境中安装 conda 包： conda activate projectname conda install --name projectname --file /home/username/username/projectname/extra/conda_env_server.txt 安装 pip 包： conda activate projectname pip install --no-index --find-links /home/username/username/projectname/extra/pip_pkg/ -r /home/username/username/projectname/extra/pip_requirements.txt 检查包（有就说明无问题，无视出现ERROR: Pipe to stdout was broken）： conda activate projectname (conda list | head -n 5 ) \u0026amp;\u0026amp; echo \u0026#34;======\u0026#34; \u0026amp;\u0026amp; (pip list | head -n 5 ) 测试运行程序： 启动程序： cd /home/username/username/projectname \u0026amp;\u0026amp; chmod +x ./scripts/*.sh \u0026amp;\u0026amp; ./scripts/projectnamedetimgstart.sh 等待程序完全启动后，在新终端中测试： conda activate projectname cd /home/username/username/username/projectname python test/test.py 查看logs文件夹下最新的以日期命名的.log文件： tail -f /home/username/username/projectname/logs/\u0026lt;修改为日期最新的那一个\u0026gt;.log 关闭程序： cd /home/username/username/projectname ./scripts/projectnamedetimgstop.sh 4. 设置程序开机自启和守护 # 安装 supervisor 并设置开机自启动 sudo apt install -y supervisor sudo systemctl enable supervisor sudo systemctl start supervisor sudo systemctl status supervisor 修改/home/username/username/projectname/deploy/illegaloperatedetimg.conf内的路径为实际路径 设置程序守护 cd /home/username/username/projectname sudo cp deploy/illegaloperatedetimg.conf /etc/supervisor/conf.d/ sudo supervisorctl reread sudo supervisorctl update 检查效果 手动打开/home/username/username/projectname/logs文件夹，查看是否有illegaloperatedetimg.log和以时间命名的.log文件，如果有则说明程序已经在后台运行。 重启，等待程序自启动，重复上一步操作 66. BUG修复 # 运行启动脚本正常，但是在测试时，出现非法指令 (核心已转储) 解决方法: requirements.txt里面的 paddlepaddle 版本号修改为2.5.2，然后运行 pip install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple 88. 附件 # 点击展开查看附件 install_miniforge.sh\n# 检测系统架构并自动下载对应的 Miniforge 安装包（国内加速） ARCH=$(uname -m) if [ \u0026#34;$ARCH\u0026#34; = \u0026#34;x86_64\u0026#34; ]; then MINIFORGE_URL=\u0026#34;https://gh-proxy.com/github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh\u0026#34; elif [ \u0026#34;$ARCH\u0026#34; = \u0026#34;aarch64\u0026#34; ]; then MINIFORGE_URL=\u0026#34;https://gh-proxy.com/github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-aarch64.sh\u0026#34; else echo \u0026#34;不支持的架构: $ARCH\u0026#34; exit 1 fi # 下载 Miniforge 安装脚本 wget $MINIFORGE_URL -O Miniforge3.sh # 赋予脚本执行权限 chmod +x Miniforge3.sh # 执行安装脚本 ./Miniforge3.sh -b -p $HOME/miniforge3 # 添加 Miniforge 到 PATH echo \u0026#39;export PATH=\u0026#34;$HOME/miniforge3/bin:$PATH\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.bashrc # 重新加载 shell（启用 Miniforge） source ~/.bashrc # 验证安装是否成功 conda --version pip.conf\n[global] # 设置默认的 PyPI 镜像源为清华大学的镜像 index-url = https://pypi.tuna.tsinghua.edu.cn/simple # 设置额外的镜像源 extra-index-url = https://mirrors.aliyun.com/pypi/simple/ https://pypi.doubanio.com/simple/ # 设置受信任的主机，用于避免 SSL 证书验证错误 trusted-host = pypi.tuna.tsinghua.edu.cn mirrors.aliyun.com pypi.doubanio.com # 禁用 pip 版本检查 disable-pip-version-check = true # 设置重试次数为 3 次 retries = 3 # 设置超时时间为 30 秒 timeout = 30 # 要求使用 HTTPS require-https = true # 显示进度条 progress-bar = on # 允许彩色输出 no-color = false [install] # 优先使用预编译的二进制包 prefer-binary = true # 允许编译源码包 no-compile = false # 安装依赖 no-deps = false # 不忽略已安装的包 ignore-installed = false # 显示脚本安装位置的警告 no-warn-script-location = false [freeze] # 在 freeze 输出中排除可编辑安装的包 exclude-editable = true # 显示所有已安装的包，包括不是直接安装的包 all = true [search] # 限制搜索结果数量为 10 个 limit = 10 # 在 PyPI 上搜索包 index = true .condarc\n# conda 配置文件 # 配置可用的包源/频道 channels: - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge # 清华大学镜像的conda-forge源 - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main # 清华大学镜像的官方main源 - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free # 清华大学镜像的官方free源 - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r # 清华大学镜像的R语言源 - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/pro # 清华大学镜像的pro源 - conda-forge # 默认的conda-forge作为兜底（可选） # 不使用ssl验证 ssl_verify: false # 显示软件包的来源频道信息 show_channel_urls: true # 设置频道优先级为严格模式 # strict模式下将严格按照channels的顺序查找包，只会从第一个找到的频道安装包 channel_priority: strict # 禁止自动激活base环境 auto_activate_base: false # 创建新环境时默认安装的包 create_default_packages: - pip # 在新环境中默认安装pip（之后一直使用pip来安装包） illegaloperatedetimg.conf\n[program:illegaloperatedetimg] # 设置程序的工作目录 directory=/home/username/username/projectname # 指定要执行的命令 command=bash scripts/projectnamedetimgstart.sh # 设置为 true，表示 supervisor 启动时自动启动该程序 autostart=true # 设置为 true，表示程序崩溃时自动重启 autorestart=true # 设置最大重启尝试次数为 200 次 startretries=200 # 设置停止程序时等待的秒数，超过后强制终止 stopwaitsecs=10 # 将标准错误重定向到标准输出 redirect_stderr=true # 指定标准输出日志文件的位置 stdout_logfile=/home/username/username/projectname/logs/illegaloperatedetimg.log ","date":"2024年12月17日","externalUrl":null,"permalink":"/posts/ai%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B%E8%AE%B0%E5%BD%95/","section":"文章","summary":"","title":"AI服务器部署流程记录","type":"posts"},{"content":"","date":"2024年12月17日","externalUrl":null,"permalink":"/","section":"MyBlog","summary":"","title":"MyBlog","type":"page"},{"content":"","date":"2024年12月17日","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"2024年12月17日","externalUrl":null,"permalink":"/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/","section":"Tags","summary":"","title":"服务器","type":"tags"},{"content":"","date":"2024年12月17日","externalUrl":null,"permalink":"/categories/%E8%87%AA%E7%94%A8/","section":"分类","summary":"","title":"自用","type":"categories"},{"content":"","date":"2024年12月17日","externalUrl":null,"permalink":"/tags/%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/","section":"Tags","summary":"","title":"项目部署","type":"tags"},{"content":" 还剩368天 1. 阶段任务（剩余3天） # 科目 本轮目标 截止日期 数二 复习高数例题和线代例题 12月21日 英二 每日背单词\n阅读10-22年全部 12月21日 信号 复习信号例题和课后题 12月21日 电路 复习电路例题和课后题 12月21日 政治 复习史纲并总结考法 12月21日 2. 今日时间分配 # 时间段 学习时长 6:00-8:30 小时 分钟 8:30-11:30 小时 分钟 11:30-12:30 —————————— 12:30-17:30 小时 分钟 17:30-19:30 ⬜ 运动 ⬜ 吃饭\n⬜ 洗漱 ✅—————————— 19:30-24-2:00 小时 分钟 总学习时长：： 小时 分钟\n3. 任务完成情况 # 科目 今日任务 完成情况打分(10) 第二天上午复习⬜✅ 数二 英二 信号 电路 政治 4. 今日评价 # ","date":"2024年12月17日","externalUrl":null,"permalink":"/postgraduate/day2/","section":"学习记录","summary":"","title":"【学习记录】Day2","type":"postgraduate"},{"content":"","date":"2024年12月17日","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","date":"2024年12月17日","externalUrl":null,"permalink":"/tags/study/","section":"Tags","summary":"","title":"Study","type":"tags"},{"content":"","date":"2024年12月17日","externalUrl":null,"permalink":"/series/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/","section":"Series","summary":"","title":"学习记录","type":"series"},{"content":" 还剩369天 1. 阶段任务（剩余4天） # 科目 本轮目标 截止日期 数二 复习高数例题和线代例题 12月21日 英二 每日背单词\n阅读10-22年全部 12月21日 信号 复习信号例题和课后题 12月21日 电路 复习电路例题和课后题 12月21日 政治 复习史纲并总结考法 12月21日 2. 今日时间分配 # 时间段 学习时长 6:00-8:30 小时 分钟 8:30-11:30 小时 分钟 11:30-12:30 —————————— 12:30-17:30 小时 分钟 17:30-19:30 ⬜ 运动 ⬜ 吃饭\n⬜ 洗漱 ✅—————————— 19:30-24-2:00 小时 分钟 总学习时长：： 小时 分钟\n3. 任务完成情况 # 科目 今日任务 完成情况打分(10) 第二天上午复习⬜✅ 数二 英二 信号 电路 政治 4. 今日评价 # ","date":"2024年12月16日","externalUrl":null,"permalink":"/postgraduate/day1/","section":"学习记录","summary":"","title":"【学习记录】Day1","type":"postgraduate"},{"content":" 梳理 # 0. 问题 # 考试心态紧张，不够放松和游刃有余 数二：做题时，有时候会忽略题目中的一些细节或者计算错误一些跳一步计算，导致答案错误 数二：平时做题，不思考和总结题型，不知道出题老头为什么要出这题、这题要考什么知识点 数二：平时做题时草稿习惯不好，字大、乱 英语：词汇量不足，阅读速度慢、方法不对，对于一些题目的答案不敏感 政治：平时积累不足，对于一些考点不透彻 1. 数二 # 1.1 高数 # graph LR A[高数] B[第一章：极限] C[第二章：连续性和间断点] D[第三章：导数和微分] E[第四章：微分中值定理] F[第五章：导数的应用] G[第六章：定积分] H[第七章：不定积分] I[第八章：二重积分] J[第九章：积分中值定理] K[第十章：积分常用技巧] L[第十一章：偏导数和全微分] M[第十二章：偏导数在计算极值上的应用] N[第十三章：一阶微分方程] O[第十四章：二阶微分方程] P[第十五章：高于二阶的常系数线性齐次微分方程] Q[第十六章：可降阶的微分方程] A --\u003e B A --\u003e C A --\u003e D A --\u003e E A --\u003e F A --\u003e G A --\u003e H A --\u003e I A --\u003e J A --\u003e K A --\u003e L A --\u003e M A --\u003e N A --\u003e O A --\u003e P A --\u003e Q 1.2 线代 # graph LR A[线代] B[第一章：行列式的性质] C[第二章：余子式和代数余子式] D[第三章：行列式按行或按列展开定理] E[第四章：计算具体型行列式的常用公式] F[第五章：计算抽象型行列式的常用公式] G[第六章：克拉姆法则] H[第七章：特殊的矩阵] I[第八章：矩阵的运算] J[第九章：伴随矩阵] K[第十章：逆矩阵] L[第十一章：初等变换和初等举证] M[第十二章：矩阵的秩] N[第十三章：n维向量的概念和运算] O[第十四章：向量组的线性表示与向量组的线性相关性定义] P[第十五章：线性相关与线性无关的结论] Q[第十六章：线性表出相关结论] R[第十七章：向量的内积及正交性] S[第十八章：齐次线性方程组] T[第十九章：非齐次线性方程组] U[第二十章：特征值和特征向量] V[第二十一章：矩阵的相似对角化] W[第二十二章：实对称矩阵的相似对角化] X[第二十三章：二次型及其标准型] Y[第二十四章:正定二次型] Z[第二十五章：矩阵等价、相似与合同间的异同] A --\u003e B A --\u003e C A --\u003e D A --\u003e E A --\u003e F A --\u003e G A --\u003e H A --\u003e I A --\u003e J A --\u003e K A --\u003e L A --\u003e M A --\u003e N A --\u003e O A --\u003e P A --\u003e Q A --\u003e R A --\u003e S A --\u003e T A --\u003e U A --\u003e V A --\u003e W A --\u003e X A --\u003e Y A --\u003e Z 2. 英二 # graph LR A[英二] B[第一部分：小作文] C[第二部分：大作文] D[第三部分：阅读4篇] E[第四部分：新题型] F[第五部分：翻译] G[第六部分：完型] A --\u003e B A --\u003e C A --\u003e D A --\u003e E A --\u003e F A --\u003e G 3. 信号 # graph LR A[信号] B[第一章：绪论与基础] C[第二章：连续系统的时域分析] D[第三章：傅里叶变换] E[第四章：拉氏变换和连续时间系统的s域分析] F[第五章：滤波、调制、抽样] G[第六章：能量信号与功率信号、能量谱与功率谱] H[第七章：离散时间系统的时域分析] I[第八章：Z变换离散时间系统的Z域分析] J[第九章：流图] K[第十章：系统的状态变量分析] L[第十一章：系统函数的补充] M[第十二章：电路分析专题] A --\u003e B A --\u003e C A --\u003e D A --\u003e E A --\u003e F A --\u003e G A --\u003e H A --\u003e I A --\u003e J A --\u003e K A --\u003e L A --\u003e M 4. 电路 # graph LR A[电路] B[第一章：电路的基本概念和定律] C[第二章：电阻电路分析] D[第三章：动态电路] E[第四章：正弦稳态电路] F[第五章：电路的频率响应和谐振电路] G[第六章：二端口电路] A --\u003e B A --\u003e C A --\u003e D A --\u003e E A --\u003e F A --\u003e G 5. 政治 # graph LR A[政治] B[第一章：马原] C[第二章：毛概] D[第三章：新思想] E[第四章：史纲] F[第五章：思修] G[第六章：时政] A --\u003e B A --\u003e C A --\u003e D A --\u003e E A --\u003e F A --\u003e G ","date":"2024年12月15日","externalUrl":null,"permalink":"/postgraduate/day0/","section":"学习记录","summary":"","title":"【学习记录】Day0","type":"postgraduate"},{"content":"","date":"2024年12月9日","externalUrl":null,"permalink":"/tags/poe/","section":"Tags","summary":"","title":"Poe","type":"tags"},{"content":" 0. 写在开头 # 今年年初的时候，出于跟进先进生产力的需求，在众多AI平台中选中了Poe。\n当时，它的优势如下：\n序号 项目 优势 1 价格 当时尼区价格是99900奈拉，加上一些消耗，大概500一年。\n而且可以年付，相对GPT和Claude的月付，低价区的收益更高。 2 功能 支持多平台的AI服务，包括各版本GPT、各版本Claude、各服务的长上下文版本，更新的也较快。\n并且是平台方接入官方API，质量方面相对其他第三方更有保障。 3 是否易用 支持对话、支持机器人API、IP限制少（ps: 不像Claude老封号） 4 用量是否足够 每月100万积分，每次对话消耗固定积分，默认API的上下文。 当时是一个人使用每个月都用不完积分，直到前几天Poe更新了计算点系统，等于是每次对话是在基础固定积分上加上Token的消耗，这样相对之前来说，消耗积分更多了，特别是长上下文情况下，积分消耗几乎是指数上升。\n不过，相对来说，Poe价格也还算实惠。再相比最近GPT降智、Claude封号，Poe仍然是一个不错的选择。\n下面是Poe和官Key对比：\n涨价之后我简单算了一下，转变思想，把Poe当成个6折API省着用。使用习惯上，非必要不追问，随手清除上下文，问题尽量一段话问出来（甚至使用沉浸式翻译把输入翻译成英文），总比买官key便宜。\n但是呢，这Poe又不显示每次对话消耗的积分，只能在设置页面看到当前总积分，很难去看到每次对话消耗的积分。 所以，我写了一个脚本，用来显示每次对话的消耗积分，方便自己控制消耗。\n2. 脚本效果 # 显示内容：\n重置时间 当前积分 本次消耗积分 3. 脚本内容 # // ==UserScript== // @name Poe积分显示 // @namespace http://tampermonkey.net/ // @version 1.2 // @author xiadengma // @description 在每次对话的下方显示当前积分和本次对话消耗的积分 // @match *://poe.com/* // @grant GM_xmlhttpRequest // @grant GM_addStyle // @grant GM_getValue // @grant GM_setValue // ==/UserScript== (function () { \u0026#39;use strict\u0026#39;; const DEBUG = false; const log = DEBUG ? console.log.bind(console, \u0026#39;[Poe积分显示]\u0026#39;) : () =\u0026gt; { }; const error = DEBUG ? console.error.bind(console, \u0026#39;[Poe积分显示]\u0026#39;) : () =\u0026gt; { }; const SELECTORS = { messagePair: \u0026#39;.ChatMessagesView_messagePair__ZEXUz\u0026#39;, inputMessage: \u0026#39;.Message_rightSideMessageBubble__ioa_i\u0026#39;, outputMessage: \u0026#39;.Message_leftSideMessageBubble__VPdk6\u0026#39;, stopButton: \u0026#39;button[aria-label=\u0026#34;停止信息\u0026#34;]\u0026#39;, actionBar: \u0026#39;.ChatMessageActionBar_actionBar__gyeEs\u0026#39;, pointsElement: \u0026#39;.SettingsSubscriptionSection_computePointsValue___DLOM\u0026#39;, resetElement: \u0026#39;.SettingsSubscriptionSection_subtext__cZuI6\u0026#39;, messagePointLimitElement: \u0026#39;.DefaultMessagePointLimit_computePointsValue__YYJkB\u0026#39; }; const CONFIG = { checkInterval: 200, stableCount: 1, cacheExpiry: 5 * 60 * 1000, retryLimit: 3, retryDelay: 1000, maxPointsFetchAttempts: 5 }; const state = { pointsBeforeOutput: null, resetDate: \u0026#39;\u0026#39;, processedInputNodes: new WeakSet(), processedOutputNodes: new WeakSet(), initialLoadCompleted: false, isFetching: false, isInitialized: false, observer: null, }; GM_addStyle(` .points-info { font-size: 12px; padding: 8px 16px; margin: 8px 0; font-family: -apple-system, BlinkMacSystemFont, \u0026#34;Segoe UI\u0026#34;, Roboto, \u0026#34;Helvetica Neue\u0026#34;, Arial, sans-serif; background: rgba(255, 255, 255, 0.05); border-radius: 8px; display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap; gap: 8px; } `); const throttle = (func, limit) =\u0026gt; { let lastFunc; let lastRan; return function () { const context = this; const args = arguments; if (!lastRan) { func.apply(context, args); lastRan = Date.now(); } else { clearTimeout(lastFunc); lastFunc = setTimeout(function () { if ((Date.now() - lastRan) \u0026gt;= limit) { func.apply(context, args); lastRan = Date.now(); } }, limit - (Date.now() - lastRan)); } } } async function fetchPoints(retryCount = 0) { if (state.isFetching) { await new Promise(resolve =\u0026gt; setTimeout(resolve, 100)); return fetchPoints(retryCount); } state.isFetching = true; try { log(\u0026#39;正在获取积分信息...\u0026#39;); const response = await new Promise((resolve, reject) =\u0026gt; { GM_xmlhttpRequest({ method: \u0026#39;GET\u0026#39;, url: \u0026#39;https://poe.com/settings\u0026#39;, onload: resolve, onerror: reject }); }); const doc = new DOMParser().parseFromString(response.responseText, \u0026#39;text/html\u0026#39;); const pointsElement = doc.querySelector(SELECTORS.pointsElement); const resetElement = doc.querySelector(SELECTORS.resetElement); const messagePointLimitElement = doc.querySelector(SELECTORS.messagePointLimitElement); if (!pointsElement) { throw new Error(\u0026#39;积分元素丢失\u0026#39;); } const currentPoints = parseInt(pointsElement.textContent.replace(/,/g, \u0026#39;\u0026#39;), 10); log(\u0026#39;当前积分:\u0026#39;, currentPoints); if (resetElement) { state.resetDate = resetElement.textContent.trim(); log(\u0026#39;重置时间:\u0026#39;, state.resetDate); } if (messagePointLimitElement) { state.messagePointLimit = parseInt(messagePointLimitElement.textContent.replace(/,/g, \u0026#39;\u0026#39;), 10); log(\u0026#39;全局单条信息预算:\u0026#39;, state.messagePointLimit); } state.pointsBeforeOutput = currentPoints; return currentPoints; } catch (err) { error(\u0026#39;获取积分信息失败\u0026#39;, err); if (retryCount \u0026lt; CONFIG.retryLimit) { log(`重试获取积分 (${retryCount + 1}/${CONFIG.retryLimit})...`); await new Promise(resolve =\u0026gt; setTimeout(resolve, CONFIG.retryDelay)); return fetchPoints(retryCount + 1); } throw err; } finally { state.isFetching = false; } } function monitorMessages() { log(\u0026#39;开始监听消息...\u0026#39;); if (state.observer) { state.observer.disconnect(); } state.observer = new MutationObserver(throttledHandleMutations); state.observer.observe(document.body, { childList: true, subtree: true }); detectInitialLoadCompletion(); } function detectInitialLoadCompletion() { let messageCount = 0; let lastMessageCount = 0; let stableCount = 0; const checkComplete = () =\u0026gt; { messageCount = document.querySelectorAll(SELECTORS.messagePair).length; if (messageCount === lastMessageCount) { if (++stableCount \u0026gt;= CONFIG.stableCount) { log(\u0026#39;初始加载完成，开始忽略历史消息\u0026#39;); state.initialLoadCompleted = true; return; } } else { stableCount = 0; } lastMessageCount = messageCount; setTimeout(checkComplete, CONFIG.checkInterval); }; checkComplete(); } const throttledHandleMutations = throttle(handleMutations, 200); function handleMutations(mutations) { for (const mutation of mutations) { for (const node of mutation.addedNodes) { if (node.nodeType === Node.ELEMENT_NODE) { const messagePair = node.closest(SELECTORS.messagePair); if (messagePair) { processMessagePair(messagePair); } } } } } const isMessageGenerating = () =\u0026gt; !!document.querySelector(SELECTORS.stopButton); function waitForMessageCompletion(outputMessage) { return new Promise(resolve =\u0026gt; { let lastContent = outputMessage.textContent; let stableCount = 0; const checkComplete = () =\u0026gt; { const currentContent = outputMessage.textContent; if (currentContent === lastContent \u0026amp;\u0026amp; !isMessageGenerating()) { if (++stableCount \u0026gt;= CONFIG.stableCount) { log(\u0026#39;消息输出已完成\u0026#39;); resolve(); return; } } else { stableCount = 0; } lastContent = currentContent; setTimeout(checkComplete, CONFIG.checkInterval); }; checkComplete(); }); } async function processMessagePair(messagePair) { if (!state.isInitialized || !state.initialLoadCompleted) { log(\u0026#39;脚本尚未完全初始化或页面未加载完成，跳过消息处理\u0026#39;); return; } const inputMessage = messagePair.querySelector(SELECTORS.inputMessage); if (inputMessage \u0026amp;\u0026amp; !state.processedInputNodes.has(inputMessage)) { log(\u0026#39;检测到新的输入消息\u0026#39;); state.processedInputNodes.add(inputMessage); log(\u0026#39;输入前积分:\u0026#39;, state.pointsBeforeOutput); } const outputMessage = messagePair.querySelector(SELECTORS.outputMessage); if (outputMessage \u0026amp;\u0026amp; !state.processedOutputNodes.has(outputMessage)) { if (!outputMessage.textContent.trim()) { log(\u0026#39;输出消息尚未完整，等待加载...\u0026#39;); return; } log(\u0026#39;检测到新的输出消息\u0026#39;); state.processedOutputNodes.add(outputMessage); const pointsBeforeOutput = state.pointsBeforeOutput; log(\u0026#39;输出前积分:\u0026#39;, pointsBeforeOutput); try { await waitForMessageCompletion(outputMessage); log(\u0026#39;消息已完全输出，等待积分更新...\u0026#39;); await new Promise(resolve =\u0026gt; setTimeout(resolve, 500)); let pointsAfterOutput = pointsBeforeOutput; for (let i = 0; i \u0026lt; CONFIG.maxPointsFetchAttempts; i++) { const newPoints = await fetchPoints(); if (newPoints !== pointsBeforeOutput) { pointsAfterOutput = newPoints; break; } log(`第 ${i + 1} 次尝试获取积分，未发现变化`); if (i \u0026lt; CONFIG.maxPointsFetchAttempts - 1) { await new Promise(resolve =\u0026gt; setTimeout(resolve, 1000)); } } const pointsUsed = pointsBeforeOutput - pointsAfterOutput; log(\u0026#39;输出后积分:\u0026#39;, pointsAfterOutput); log(\u0026#39;本次对话消耗积分:\u0026#39;, pointsUsed); if (pointsUsed \u0026gt; 0) { displayPointsInfo(messagePair, pointsAfterOutput, pointsUsed); } state.pointsBeforeOutput = pointsAfterOutput; } catch (err) { error(\u0026#39;积分更新或消息完成失败:\u0026#39;, err); } } } function displayPointsInfo(messagePair, currentPoints, pointsUsed) { if (messagePair.querySelector(\u0026#39;.points-info\u0026#39;)) return; log(\u0026#39;显示积分信息\u0026#39;); const pointsInfo = createPointsInfoElement(currentPoints, pointsUsed); const actionBar = messagePair.querySelector(SELECTORS.actionBar); if (actionBar) { actionBar.parentNode.insertBefore(pointsInfo, actionBar); } else { messagePair.appendChild(pointsInfo); } } function createPointsInfoElement(currentPoints, pointsUsed) { const pointsInfo = document.createElement(\u0026#39;div\u0026#39;); pointsInfo.className = \u0026#39;points-info\u0026#39;; const infoItems = [ { text: `重置时间: ${state.resetDate}`, color: \u0026#39;#555\u0026#39; }, { text: `当前积分: ${currentPoints.toLocaleString()}`, color: \u0026#39;#888\u0026#39; }, { text: `本次消耗积分: ${pointsUsed}`, color: \u0026#39;#fff\u0026#39; } ]; pointsInfo.innerHTML = infoItems.map(item =\u0026gt; `\u0026lt;div style=\u0026#34;color: ${item.color}\u0026#34;\u0026gt;${item.text}\u0026lt;/div\u0026gt;`).join(\u0026#39;\u0026#39;); return pointsInfo; } function handleUrlChange() { log(\u0026#39;URL已更改，重置状态\u0026#39;); state.processedInputNodes = new WeakSet(); state.processedOutputNodes = new WeakSet(); state.initialLoadCompleted = false; state.pointsBeforeOutput = null; init(); } async function init() { try { const initialPoints = await fetchPoints(); state.pointsBeforeOutput = initialPoints; state.isInitialized = true; log(\u0026#39;初始化完成，当前积分:\u0026#39;, initialPoints); monitorMessages(); window.addEventListener(\u0026#39;popstate\u0026#39;, handleUrlChange); let lastUrl = location.href; new MutationObserver(() =\u0026gt; { const url = location.href; if (url !== lastUrl) { lastUrl = url; handleUrlChange(); } }).observe(document, { subtree: true, childList: true }); } catch (err) { error(\u0026#39;初始化失败:\u0026#39;, err); } } init(); })(); ","date":"2024年12月9日","externalUrl":null,"permalink":"/posts/poe%E6%98%BE%E7%A4%BA%E6%B6%88%E8%80%97%E7%A7%AF%E5%88%86%E8%84%9A%E6%9C%AC/","section":"文章","summary":"","title":"Poe显示消耗积分脚本","type":"posts"},{"content":"","date":"2024年12月9日","externalUrl":null,"permalink":"/tags/tampermonkey/","section":"Tags","summary":"","title":"Tampermonkey","type":"tags"},{"content":"","date":"2024年12月9日","externalUrl":null,"permalink":"/tags/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/","section":"Tags","summary":"","title":"实用工具","type":"tags"},{"content":"","date":"2024年12月9日","externalUrl":null,"permalink":"/tags/%E8%84%9A%E6%9C%AC/","section":"Tags","summary":"","title":"脚本","type":"tags"},{"content":"","date":"2024年11月25日","externalUrl":null,"permalink":"/tags/code/","section":"Tags","summary":"","title":"Code","type":"tags"},{"content":"","date":"2024年11月25日","externalUrl":null,"permalink":"/tags/shell/","section":"Tags","summary":"","title":"Shell","type":"tags"},{"content":"","date":"2024年11月25日","externalUrl":null,"permalink":"/tags/zsh/","section":"Tags","summary":"","title":"Zsh","type":"tags"},{"content":" 0. 写在开头 # 由于系统、环境等差异可能过大，这里只是记录个人的zsh配置，仅供参考。\n0.1 .zshrc # # My zsh settings with zinit # ------------------- 核心配置 ------------------- # 性能优化选项 skip_global_compinit=1 DISABLE_MAGIC_FUNCTIONS=true ZSH_DISABLE_COMPFIX=true # 补全系统设置 COMPLETION_WAITING_DOTS=\u0026#34;true\u0026#34; ZSH_AUTOSUGGEST_MANUAL_REBIND=1 ZSH_AUTOSUGGEST_USE_ASYNC=1 ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20 # ------------------- Powerlevel10k 即时提示 ------------------- if [[ -r \u0026#34;${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh\u0026#34; ]]; then source \u0026#34;${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh\u0026#34; fi # ------------------- zinit 插件管理器 ------------------- source \u0026#34;/usr/share/zinit/zinit.zsh\u0026#34; autoload -Uz _zinit (( ${+_comps} )) \u0026amp;\u0026amp; _comps[zinit]=_zinit # zinit annexes zinit ice wait\u0026#34;1\u0026#34; lucid as\u0026#34;null\u0026#34; for \\ zdharma-continuum/zinit-annex-as-monitor \\ zdharma-continuum/zinit-annex-bin-gem-node \\ zdharma-continuum/zinit-annex-patch-dl \\ zdharma-continuum/zinit-annex-rust # ------------------- 主题 ------------------- zinit ice depth=1 zinit light romkatv/powerlevel10k # ------------------- 核心插件 ------------------- # fzf zinit ice from\u0026#34;gh-r\u0026#34; as\u0026#34;command\u0026#34; zinit light junegunn/fzf # 补全增强 \u0026amp; 补全初始化 zinit ice wait\u0026#34;0a\u0026#34; lucid atload\u0026#34;zicompinit; zicdreplay\u0026#34; blockf zinit light zsh-users/zsh-completions # fzf-tab zinit ice wait\u0026#34;0b\u0026#34; lucid zinit light Aloxaf/fzf-tab # 自动建议 zinit ice wait\u0026#34;0c\u0026#34; lucid \\ atload\u0026#39; _zsh_autosuggest_start bindkey \u0026#34;\\`\u0026#34; autosuggest-accept \u0026#39; zinit light zsh-users/zsh-autosuggestions # 历史命令 zinit ice wait\u0026#34;0d\u0026#34; lucid from\u0026#34;gh-r\u0026#34; as\u0026#34;program\u0026#34; pick\u0026#34;*/atuin\u0026#34; \\ atload\u0026#39; eval \u0026#34;$(atuin init zsh)\u0026#34; bindkey \u0026#34;^R\u0026#34; _atuin_search_widget \u0026#39; zinit light atuinsh/atuin # 语法高亮 zinit ice wait\u0026#34;0e\u0026#34; lucid atinit\u0026#34;zpcompinit;zpcdreplay\u0026#34; zinit light zdharma-continuum/fast-syntax-highlighting # ------------------- CLI 工具 ------------------- # 核心工具（无延迟加载） zinit ice wait\u0026#34;0\u0026#34; lucid from\u0026#34;gh-r\u0026#34; as\u0026#34;program\u0026#34; pick\u0026#34;eza*/eza\u0026#34; zinit light eza-community/eza zinit ice wait\u0026#34;0\u0026#34; lucid from\u0026#34;gh-r\u0026#34; as\u0026#34;program\u0026#34; pick\u0026#34;bat*/bat\u0026#34; zinit light sharkdp/bat # 延迟加载工具 zinit ice wait\u0026#34;1\u0026#34; lucid from\u0026#34;gh-r\u0026#34; as\u0026#34;program\u0026#34; pick\u0026#34;ripgrep*/rg\u0026#34; zinit light BurntSushi/ripgrep zinit ice wait\u0026#34;1\u0026#34; lucid from\u0026#34;gh-r\u0026#34; as\u0026#34;program\u0026#34; pick\u0026#34;fd*/fd\u0026#34; zinit light sharkdp/fd zinit ice wait\u0026#34;1\u0026#34; lucid from\u0026#34;gh-r\u0026#34; as\u0026#34;program\u0026#34; pick\u0026#34;lazydocker\u0026#34; zinit light jesseduffield/lazydocker zinit ice wait\u0026#34;1\u0026#34; lucid from\u0026#34;gh-r\u0026#34; as\u0026#34;program\u0026#34; pick\u0026#34;*/usr/bin/fastfetch\u0026#34; zinit light fastfetch-cli/fastfetch zinit ice wait\u0026#34;1\u0026#34; lucid from\u0026#34;gh-r\u0026#34; as\u0026#34;program\u0026#34; pick\u0026#34;duf\u0026#34; zinit light muesli/duf zinit ice wait\u0026#34;1\u0026#34; lucid as\u0026#34;program\u0026#34; pick\u0026#34;prettyping\u0026#34; zinit load denilsonsa/prettyping # bat-extras zinit ice wait\u0026#34;1\u0026#34; lucid as\u0026#34;program\u0026#34; pick\u0026#34;src/batgrep.sh\u0026#34; \\ atload\u0026#34;alias batgrep=\u0026#39;batgrep.sh\u0026#39;\u0026#34; zinit ice wait\u0026#34;1\u0026#34; lucid as\u0026#34;program\u0026#34; pick\u0026#34;src/batdiff.sh\u0026#34; \\ atload\u0026#34;alias batdiff=\u0026#39;batdiff.sh\u0026#39;\u0026#34; zinit light eth-p/bat-extras # ------------------- 补全配置 ------------------- # 基础补全设置 zstyle \u0026#39;:completion:*\u0026#39; completer _expand _complete _ignored zstyle \u0026#39;:completion:*\u0026#39; matcher-list \u0026#39;m:{a-z}={A-Z}\u0026#39; zstyle \u0026#39;:completion:*\u0026#39; list-colors \u0026#34;${(s.:.)LS_COLORS}\u0026#34; zstyle \u0026#39;:completion:*\u0026#39; menu no # fzf-tab 基础设置 zstyle \u0026#39;:fzf-tab:*\u0026#39; use-fzf-default-opts yes # fzf-tab 预览设置 zstyle \u0026#39;:fzf-tab:complete:cd:*\u0026#39; fzf-preview \u0026#39;eza --icons -1 --color=always $realpath\u0026#39; zstyle \u0026#39;:fzf-tab:complete:cd:*\u0026#39; popup-pad 30 0 zstyle \u0026#39;:fzf-tab:complete:__zoxide_z:*\u0026#39; fzf-preview \u0026#39;eza --icons -1 --color=always $realpath\u0026#39; zstyle \u0026#39;:fzf-tab:complete:z:*\u0026#39; fzf-preview \u0026#39;eza --icons -1 --color=always $realpath\u0026#39; # 进程补全预览 zstyle \u0026#39;:fzf-tab:complete:kill:argument-rest\u0026#39; fzf-preview \u0026#39;ps --pid=$word -o cmd --no-headers -w -w\u0026#39; zstyle \u0026#39;:fzf-tab:complete:kill:argument-rest\u0026#39; fzf-flags \u0026#39;--preview-window=down:3:wrap\u0026#39; zstyle \u0026#39;:fzf-tab:complete:kill:*\u0026#39; popup-pad 0 3 # fzf-tab 快捷键 zstyle \u0026#39;:fzf-tab:*\u0026#39; fzf-bindings \u0026#39;`:accept\u0026#39; zstyle \u0026#39;:fzf-tab:*\u0026#39; switch-group \u0026#39;\u0026lt;\u0026#39; \u0026#39;\u0026gt;\u0026#39; # ------------------- 自动建议配置 ------------------- ZSH_AUTOSUGGEST_STRATEGY=(history completion) ZSH_AUTOSUGGEST_COMPLETION_IGNORE=\u0026#39;( |man |pikaur -S )*\u0026#39; ZSH_AUTOSUGGEST_HISTORY_IGNORE=\u0026#39;?(#c50,)\u0026#39; # ------------------- fzf 配置 ------------------- export FZF_DEFAULT_OPTS=\u0026#34; --ansi --layout=reverse --info=inline --height=50% --multi --cycle --preview-window=right:50% --preview-window=cycle --prompt=\u0026#39;λ -\u0026gt; \u0026#39; --pointer=\u0026#39;▷\u0026#39; --marker=\u0026#39;✓\u0026#39; --color=bg+:236,gutter:-1,fg:-1,bg:-1,hl:-1,hl+:-1,prompt:-1,pointer:105,marker:-1,spinner:-1 \u0026#34; export FZF_DEFAULT_COMMAND=\u0026#39;fd --type f --hidden --follow --exclude .git\u0026#39; # ------------------- Conda 配置 ------------------- export CONDA_AUTO_ACTIVATE_BASE=false conda() { unfunction conda eval \u0026#34;$(/opt/miniforge/bin/conda shell.zsh hook)\u0026#34; conda $@ } [[ \u0026#34;${CONDA_AUTO_ACTIVATE_BASE:-true}\u0026#34; == \u0026#34;true\u0026#34; ]] \u0026amp;\u0026amp; { eval \u0026#34;$(/opt/miniforge/bin/conda shell.zsh hook)\u0026#34; conda activate base } # ------------------- 其他工具配置 ------------------- # zoxide eval \u0026#34;$(zoxide init zsh --cmd cd)\u0026#34; # 加载自定义别名 source $HOME/.zsh_aliases # Powerlevel10k 配置 [[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh 0.2 .zsh_aliases # alias l=\u0026#34;eza --icons --long --header\u0026#34; alias ls=\u0026#34;eza --icons --grid\u0026#34; alias ll=\u0026#34;eza --icons --long --header\u0026#34; alias la=\u0026#34;eza --icons --long --header --all\u0026#34; alias lg=\u0026#34;eza --icons --long --header --all --git\u0026#34; alias tree=\u0026#34;eza --icons --tree -L1\u0026#34; alias cat=\u0026#34;bat\u0026#34; alias man=\u0026#34;tldr\u0026#34; alias mkdir=\u0026#39;mkdir -p\u0026#39; alias df=\u0026#34;duf -style unicode -hide-mp \u0026#39;/run/credentials/*\u0026#39;\u0026#34; alias top=\u0026#34;bpytop\u0026#34; alias gedit=\u0026#34;gnome-text-editor\u0026#34; alias nvidia-smi=\u0026#34;watch -n 3 -c nvidia-smi\u0026#34; alias x=\u0026#34;unar\u0026#34; alias ff=\u0026#34;fastfetch\u0026#34; # 快速显示fastfetch function tmp() { cd \u0026#34;$(mktemp -d /tmp/temp_XXX)\u0026#34; #创建临时目录 } 1. 基本信息 # System: Arch Linux x86_64 Terminal: kitty Shell: zsh Theme: powerlevel10k Plugins Manerger: zinit 2. 原有配置痛点 # 如果历史命令中有中文，按 up键，会出现历史命令错位和终止终端的问题。 有些时候，命令输入延迟很高，已经输入完一段命令，但是终端是慢慢一个字一个字跳的。 性能还是不够高。 3. 方案对比和选择 # 3.1 插件管理器或插件框架 # 序号 项目 说明 优势 劣势 1 Oh My Zsh 最流行的Zsh框架 - 300+预置插件和150+主题\u0026lt;br\u0026gt;- 配置简单直观\u0026lt;br\u0026gt;- 社区庞大 - 启动速度慢\u0026lt;br\u0026gt;- 插件数量增加会显著降低性能 2 Zinit 现代化插件管理器 - Turbo模式启动速度提升50-80%\u0026lt;br\u0026gt;- 支持选择性禁用/启用功能\u0026lt;br\u0026gt;- 完整兼容OMZ和Prezto插件 - 语法相对复杂\u0026lt;br\u0026gt;- 不适合新手 3 Zim 轻量级框架 - 启动速度快\u0026lt;br\u0026gt;- 模块化设计\u0026lt;br\u0026gt;- 合理的默认配置\u0026lt;br\u0026gt;- 完整支持OMZ插件 - 内置功能相对较少 4 Sheldon 可配置的插件管理器 - 配置灵活\u0026lt;br\u0026gt;- 支持延迟加载\u0026lt;br\u0026gt;- 支持多种shell - 社区相对较小 5 zsh4humans 优化的Zsh环境 - 启动速度快\u0026lt;br\u0026gt;- 默认配置合理\u0026lt;br\u0026gt;- 性能优化出色 - 定制性相对较低 6 Antigen 传统插件管理器 - 类似包管理器的使用方式\u0026lt;br\u0026gt;- 自动更新插件 - 维护不够活跃\u0026lt;br\u0026gt;- 性能一般 7 zgen 轻量级管理器 - 生成静态加载文件\u0026lt;br\u0026gt;- 启动相对较快 - 功能相对简单\u0026lt;br\u0026gt;- 更新较少 8 zplug 全功能插件管理器 - 功能丰富\u0026lt;br\u0026gt;- 并行安装插件 - 已基本停止维护\u0026lt;br\u0026gt;- 性能一般 在这个里面，根据轻量化、性能好、社区维护活跃等因素，我最终选择了 Zinit作为插件管理器。\n3.2 插件 # 语法高亮：fast-syntax-highlighting 命令补全：zsh-completions和 fzf-tab 智能建议：zsh-autosuggestions 目录跳转：zoxide 序号 项目 说明 优势 劣势 1 zoxide Rust编写的现代化目录跳转工具 - 性能最快，启动速度快\u0026lt;br\u0026gt;- 使用简单直观\u0026lt;br\u0026gt;- 支持所有主流shell - 需要额外安装\u0026lt;br\u0026gt;- 不支持相对路径跳转 2 autojump Python编写的经典跳转工具 - 功能丰富完整\u0026lt;br\u0026gt;- 高级特性多 - 学习曲线较陡\u0026lt;br\u0026gt;- 性能相对较慢 3 z Zsh内置的目录跳转插件 - 无需额外安装\u0026lt;br\u0026gt;- 与Zsh深度集成 - 功能相对基础\u0026lt;br\u0026gt;- 仅支持Zsh 4 z.lua Lua实现的跳转工具 - 跨平台支持好\u0026lt;br\u0026gt;- 配置灵活 - 性能比zoxide慢\u0026lt;br\u0026gt;- 需要Lua环境 5 zsh-z Zsh专用的z实现 - 轻量级\u0026lt;br\u0026gt;- 安装简单 - 仅支持Zsh\u0026lt;br\u0026gt;- 功能较少 6 ZLOcation Shell原生实现的跳转工具 - 无外部依赖\u0026lt;br\u0026gt;- 性能稳定 - 功能相对简单\u0026lt;br\u0026gt;- 社区较小 历史命令：atuin 序号 项目 说明 优势 劣势 1 atuin 基于SQLite的现代化shell历史记录工具 - 支持多设备同步\n- 支持端到端加密\n- 可按目录/主机等过滤搜索\n- 记录命令执行时间和退出码\n- 支持自托管同步服务器\n- 配置简单，安装便捷 - 首次打开仪表板较慢\n- 在mosh下可能出现屏幕显示问题\n- 同步机制不够直观\n- 配置无法跨设备同步 2 zsh-histdb 基于SQLite的Zsh历史记录插件 - 记录命令工作目录\n- 记录命令执行主机\n- 支持多数据库合并\n- 与zsh-autosuggestions集成良好\n- 支持按目录搜索历史 - 不使用传统文本文件存储\n- 项目维护不够活跃\n- 仅支持Zsh\n- 配置相对复杂 主题美化：powerlevel10k 3.2 第三方命令行工具管理 # 由于改配置会同步 Docker深度学习环境、远程服务器使用，系统包管理器不同（有ubuntu、archlinux、debian等），故第三方命令行工具使用 zinit管理，而非使用包管理器管理。 则新建一系统时安装zsh和zinit，再同步配置即可，其余的交给zinit管理。\nTODO: 之后用chezimo管理配置文件并同步到各个系统。\n4. 测试工具 # 这里我们使用zsh-bench基准工具来测试zsh交互性能，再进行对比。\n测量指标 first_prompt_lag_ms (首次提示符延迟) 打开新终端时，显示第一个命令提示符（如user@host:~$）所需的时间 良好: \u0026lt; 50ms，几乎瞬间显示提示符 较差: \u0026gt; 100ms，打开终端后明显等待才看到提示符 first_command_lag_ms (首次命令延迟) 输入第一个命令（如ls）到执行完成的时间 良好: \u0026lt; 200ms，输入命令后立即执行 较差: \u0026gt; 500ms，输入第一个命令后明显卡顿 command_lag_ms (命令延迟) 执行后续命令的平均响应时间 良好: \u0026lt; 10ms，命令执行无感知延迟 较差: \u0026gt; 50ms，每次执行命令都能感觉到轻微卡顿 input_lag_ms (输入延迟) 按键到字符显示在屏幕上的时间 良好: \u0026lt; 30ms，打字流畅自然 较差: \u0026gt; 50ms，打字时感觉明显延迟或卡顿 exit_time_ms (退出时间) 输入exit或按Ctrl+D到终端完全关闭的时间 良好: \u0026lt; 100ms，终端立即关闭 较差: \u0026gt; 200ms，关闭终端时出现明显延迟 测试命令如下： ./zsh-bench -i 30 -l yes -g yes 5. 测试结果 # ==\u0026gt; benchmarking login shell of user xiadengma ... creates_tty=0 has_compsys=0 has_syntax_highlighting=0 has_autosuggestions=0 has_git_prompt=1 first_prompt_lag_ms=18.829 first_command_lag_ms=78.340 command_lag_ms=4.930 input_lag_ms=3.903 exit_time_ms=45.429 可以看到当前zsh配置在性能上表现良好，响应速度快。\n参考资料 # 点击展开查看参考资料 https://github.com/crivotz/dot_files/blob/master/linux/zinit/zshrc https://github.com/synthpop123/dotfiles/blob/main/.zshrc https://github.com/Aloxaf/dotfiles/blob/master/zsh/.config/zsh/zshrc.zsh https://www.aloxaf.com/2024/02/manage_zsh_shell_with_atuin/ https://blog.lkwplus.com/posts/macos-dev-setup/#zsh-%E9%85%8D%E7%BD%AE https://notes.fe-mm.com/workflow/terminal/toolkit ","date":"2024年11月25日","externalUrl":null,"permalink":"/posts/%E4%B8%AA%E4%BA%BAzsh%E9%85%8D%E7%BD%AE/","section":"文章","summary":"","title":"个人zsh配置","type":"posts"},{"content":"","date":"2024年11月25日","externalUrl":null,"permalink":"/series/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","section":"Series","summary":"","title":"开发环境配置","type":"series"},{"content":"","date":"2024年11月22日","externalUrl":null,"permalink":"/tags/blowfish/","section":"Tags","summary":"","title":"Blowfish","type":"tags"},{"content":"详细见https://blowfish.page/zh-cn/docs/shortcodes/#button\n1. 展开折叠 # 点击展开 这是折叠的内容 默认展开的内容 这个内容块默认是展开的 2. 各类型提示框 # 这是一个信息提示框 这是一个警告提示框 这是一个危险提示框 3. 画廊 # 用于生成可交互且具有视觉吸引力的方式展示多个图像的画廊。这允许用户滑动浏览多个图像，同时仅占用单个图像的垂直空间。所有图像均使用父组件的完整宽度并使用预定义的宽高比 16:9 、 21:9 或 32:9 之一显示。\n参数 功能 images 必填 用于匹配图像名称的正则表达式或 URL。 aspectRatio 可选 画廊的纵横比。 16-9 、 21-9 或 32-9 。默认设置为 16-9 。 interval 可选 自动滚动的时间间隔，以毫秒为单位指定。默认为 2000 (2秒)。 4. 图表 # 支持chart.js，具体见Chart.js 官方文档。\n5. 外部代码 # 此短代码用于轻松从外部源导入代码，无需复制和粘贴\nParameter Description url 必需的 外部托管代码文件的 URL. type 用于语法突出显示的代码类型. startLine 可选 从代码文件中导入的起始行. endLine 可选 从代码文件中导入的结束行. 6. Github卡片 # 允许您快速链接到 github Repo，同时显示和更新有关它的实时统计信息，例如它的 star 和 fork 数。\n参数 功能 repo [String] 格式为 username/repo 的 github repo nunocoracao/blowfish Personal Website \u0026amp; Blog Theme for Hugo HTML 1570 437 7. KaTeX数学公式 # katex简码可用于使用 KaTeX 包向文章内容添加数学表达式。有关可用语法，请参阅支持的 TeX 函数的在线参考。\n要在文章中加入数学表达式，只需将简码放在任意位置即可。每篇文章只需加入一次，KaTeX 将自动呈现该页面上的任何标记。支持内联和块表示法。\n可以通过将表达式包装在 \\\\( 和 \\\\) 分隔符中来生成内联表示法。或者，可以使用 $$ 分隔符生成块符号。\n\\(f(a,b,c) = (a^2+b^2+c^2)^3\\)\n8. Mermaid图表和流程图 # mermaid允许您使用文本绘制可视化的图表。底层使用 Mermaid，并支持各种图表、图表和其他输出格式。\n只需在 mermaid 简码中编写您的 Mermaid 语法，然后让插件完成其余的工作。\n已经支持markdown语法，直接在markdown中编写即可。\n有关语法和支持的图表类型的详细信息，请参阅官方 Mermaid 文档。\ngraph LR; A[Lemons]--\u003eB[Lemonade]; B--\u003eC[Profit] ","date":"2024年11月22日","externalUrl":null,"permalink":"/posts/blowfish%E4%B8%BB%E9%A2%98%E5%B8%B8%E7%94%A8%E7%AE%80%E7%A0%81/","section":"文章","summary":"","title":"Blowfish主题常用简码","type":"posts"},{"content":"","date":"2024年11月22日","externalUrl":null,"permalink":"/tags/hugo/","section":"Tags","summary":"","title":"Hugo","type":"tags"},{"content":"","date":"2024年11月22日","externalUrl":null,"permalink":"/tags/shortcode/","section":"Tags","summary":"","title":"Shortcode","type":"tags"},{"content":"","date":"2024年11月12日","externalUrl":null,"permalink":"/tags/archlinux/","section":"Tags","summary":"","title":"Archlinux","type":"tags"},{"content":" 0. 写在开头 # 在配置好代理和软件源的情况下，配置开发环境。\n1. 基本信息与软件安装 # System: Arch Linux x86_64 IDE: VSCode LSP: clangd Compiler: clang Debugger: lldb Build System: xmake 在终端依次输入下列命令安装软件：\nsudo pacman -Syyu sudo pacman -S clang sudo pacman -S clangd sudo pacman -S lldb sudo pacman -S xmake sudo pacman -S visual-studio-code-bin 依次输入下列命令检查是否正确安装：\nclang -v clangd -v clang-tidy --version clang-format --version lldb --version xmake --version 2. vscode 基础配置与插件 # 基础配置作为所有配置的基础和平时的编辑器使用\n2.1 vscode 基础插件 # 进入vscode，点击扩展，依次输入下列内容安装显示的第一个插件\nMS-CEINTL.vscode-language-pack-zh-hans：中文语言包 intellsmi.comment-translate：注释翻译 deeplx-comment-translate.deeplx-comment-translate：注释翻译扩展，使其可以使用Deeplx usernamehw.errorlens：代码错误提示 eamodio.gitlens：git工具 tamasfe.even-better-toml：TOML语法高亮 cweijan.vscode-office：vscode内office文件预览和markdown预览 github.copilot：AI代码提示 github.copilot-chat：AI代码对话 fisheva.eva-theme：vscode颜色主题 miguelsolorio.fluent-icons：vscode产品图标主题 wayou.vscode-icons-mac：vscode文件图标主题 ms-vscode-remote.remote-ssh：SSH远程连接 在安装完成后，在扩展列表依次右键点击插件，打开将扩展应用于所有配置文件选项\n2.2 vscode 基础配置 # 进入vscode，先点击左上角文件-\u0026gt;首选项-\u0026gt;Profile-\u0026gt;默认，再按快捷键Ctrl+Shift+P，在输入框内输入user json，选中Preferences: Open Settings (JSON),此时会有一个settings.json文件被打开，修改其内容为下面内容\n{ //------------------下列配置共享给所有其他配置------------------ \u0026#34;workbench.settings.applyToAllProfiles\u0026#34;: [ //---工作台--- \u0026#34;workbench.colorTheme\u0026#34;, \u0026#34;workbench.iconTheme\u0026#34;, \u0026#34;workbench.productIconTheme\u0026#34;, \u0026#34;workbench.startupEditor\u0026#34;, \u0026#34;workbench.list.smoothScrolling\u0026#34;, \u0026#34;workbench.tree.indent\u0026#34;, \u0026#34;workbench.editor.highlightModifiedTabs\u0026#34;, \u0026#34;workbench.editor.pinnedTabsOnSeparateRow\u0026#34;, \u0026#34;workbench.editor.wrapTabs\u0026#34;, \u0026#34;workbench.editor.empty.hint\u0026#34;, \u0026#34;workbench.editor.enablePreview\u0026#34;, \u0026#34;workbench.activityBar.location\u0026#34;, \u0026#34;workbench.editorAssociations\u0026#34;, \u0026#34;workbench.reduceMotion\u0026#34;, //---文本编辑器--- \u0026#34;editor.accessibilitySupport\u0026#34;, \u0026#34;editor.codeLensFontFamily\u0026#34;, \u0026#34;editor.codeLensFontSize\u0026#34;, \u0026#34;editor.cursorBlinking\u0026#34;, \u0026#34;editor.cursorSurroundingLines\u0026#34;, \u0026#34;editor.fontFamily\u0026#34;, \u0026#34;editor.fontLigatures\u0026#34;, \u0026#34;editor.fontSize\u0026#34;, \u0026#34;editor.fontWeight\u0026#34;, \u0026#34;editor.lineHeight\u0026#34;, \u0026#34;editor.formatOnPaste\u0026#34;, \u0026#34;editor.formatOnSave\u0026#34;, \u0026#34;editor.gotoLocation.multipleDeclarations\u0026#34;, \u0026#34;editor.gotoLocation.multipleDefinitions\u0026#34;, \u0026#34;editor.guides.bracketPairs\u0026#34;, \u0026#34;editor.guides.indentation\u0026#34;, \u0026#34;editor.inlayHints.enabled\u0026#34;, \u0026#34;editor.linkedEditing\u0026#34;, \u0026#34;editor.multiCursorModifier\u0026#34;, \u0026#34;editor.quickSuggestions.comments\u0026#34;, \u0026#34;editor.quickSuggestions.strings\u0026#34;, \u0026#34;editor.quickSuggestionsDelay\u0026#34;, \u0026#34;editor.renderWhitespace\u0026#34;, \u0026#34;editor.smoothScrolling\u0026#34;, \u0026#34;editor.snippetSuggestions\u0026#34;, \u0026#34;editor.suggest.insertMode\u0026#34;, \u0026#34;editor.suggest.preview\u0026#34;, \u0026#34;editor.suggestFontSize\u0026#34;, \u0026#34;editor.tokenColorCustomizations\u0026#34;, \u0026#34;editor.unicodeHighlight.allowedLocales\u0026#34;, \u0026#34;editor.acceptSuggestionOnEnter\u0026#34;, \u0026#34;editor.bracketPairColorization.enabled\u0026#34;, \u0026#34;editor.wordWrap\u0026#34;, \u0026#34;editor.wordWrapColumn\u0026#34;, \u0026#34;editor.mouseWheelZoom\u0026#34;, \u0026#34;editor.suggest.snippetsPreventQuickSuggestions\u0026#34;, \u0026#34;editor.suggestSelection\u0026#34;, \u0026#34;editor.stickyScroll.enabled\u0026#34;, \u0026#34;editor.wordSeparators\u0026#34;, \u0026#34;editor.dragAndDrop\u0026#34;, \u0026#34;editor.showFoldingControls\u0026#34;, \u0026#34;editor.hover.above\u0026#34;, \u0026#34;editor.hover.hidingDelay\u0026#34;, \u0026#34;editor.scrollbar.verticalScrollbarSize\u0026#34;, \u0026#34;editor.unicodeHighlight.nonBasicASCII\u0026#34;, \u0026#34;editor.minimap.maxColumn\u0026#34;, //---文件资源管理器--- \u0026#34;explorer.confirmDelete\u0026#34;, \u0026#34;explorer.enableDragAndDrop\u0026#34;, \u0026#34;explorer.confirmDragAndDrop\u0026#34;, \u0026#34;explorer.fileNesting.enabled\u0026#34;, \u0026#34;explorer.autoReveal\u0026#34;, //---文件--- \u0026#34;files.autoGuessEncoding\u0026#34;, \u0026#34;files.autoSave\u0026#34;, \u0026#34;files.autoSaveDelay\u0026#34;, \u0026#34;files.eol\u0026#34;, \u0026#34;files.exclude\u0026#34;, \u0026#34;files.trimFinalNewlines\u0026#34;, \u0026#34;files.trimTrailingWhitespace\u0026#34;, \u0026#34;files.insertFinalNewline\u0026#34;, \u0026#34;files.refactoring.autoSave\u0026#34;, \u0026#34;files.watcherExclude\u0026#34;, \u0026#34;files.hotExit\u0026#34;, //---终端--- \u0026#34;terminal.integrated.fontSize\u0026#34;, \u0026#34;terminal.integrated.fontWeight\u0026#34;, \u0026#34;terminal.integrated.stickyScroll.enabled\u0026#34;, \u0026#34;terminal.integrated.gpuAcceleration\u0026#34;, \u0026#34;terminal.integrated.defaultLocation\u0026#34;, \u0026#34;terminal.integrated.enableMultiLinePasteWarning\u0026#34;, \u0026#34;terminal.integrated.smoothScrolling\u0026#34;, \u0026#34;terminal.integrated.defaultProfile.linux\u0026#34;, \u0026#34;terminal.integrated.scrollback\u0026#34;, //---其他自带设置--- \u0026#34;breadcrumbs.icons\u0026#34;, \u0026#34;notebook.breadcrumbs.showCodeCells\u0026#34;, \u0026#34;notebook.output.fontFamily\u0026#34;, \u0026#34;notebook.output.fontSize\u0026#34;, \u0026#34;search.exclude\u0026#34;, \u0026#34;search.searchEditor.singleClickBehaviour\u0026#34;, \u0026#34;search.followSymlinks\u0026#34;, \u0026#34;search.collapseResults\u0026#34;, \u0026#34;scm.inputFontSize\u0026#34;, \u0026#34;window.dialogStyle\u0026#34;, \u0026#34;window.density.editorTabHeight\u0026#34;, \u0026#34;window.restoreWindows\u0026#34;, \u0026#34;window.newWindowProfile\u0026#34;, \u0026#34;window.customTitleBarVisibility\u0026#34;, \u0026#34;extensions.ignoreRecommendations\u0026#34;, \u0026#34;update.mode\u0026#34;, \u0026#34;[jsonc].editor.defaultFormatter\u0026#34;, \u0026#34;security.workspace.trust.untrustedFiles\u0026#34;, \u0026#34;git.openRepositoryInParentFolders\u0026#34;, \u0026#34;extensions.autoUpdate\u0026#34;, //----插件：Error Lens--- \u0026#34;errorLens.enabledDiagnosticLevels\u0026#34;, \u0026#34;errorLens.excludeBySource\u0026#34;, \u0026#34;errorLens.fontSize\u0026#34;, \u0026#34;errorLens.fontWeight\u0026#34;, //----插件：GitHub Copilot\u0026amp;Chat--- \u0026#34;github.copilot.enable\u0026#34;, \u0026#34;github.copilot.chat.localeOverride\u0026#34;, \u0026#34;github.copilot.advanced\u0026#34;, \u0026#34;github-enterprise.uri\u0026#34;, //----插件：Comment Translate\u0026amp;Deeplx comment translate--- \u0026#34;commentTranslate.targetLanguage\u0026#34;, \u0026#34;commentTranslate.hover.string\u0026#34;, \u0026#34;commentTranslate.multiLineMerge\u0026#34;, \u0026#34;commentTranslate.source\u0026#34;, \u0026#34;commentTranslate.maxTranslationLength\u0026#34;, \u0026#34;deeplxTranslate.authKey\u0026#34;, //----插件：Vscode Office--- \u0026#34;vscode-office.editorTheme\u0026#34;, \u0026#34;vscode-office.openOutline\u0026#34;, //----插件：gitlens--- \u0026#34;gitlens.currentLine.enabled\u0026#34;, \u0026#34;gitlens.blame.format\u0026#34;, \u0026#34;gitlens.hovers.currentLine.over\u0026#34;, \u0026#34;gitlens.hovers.enabled\u0026#34;, \u0026#34;gitlens.hovers.avatars\u0026#34;, \u0026#34;gitlens.blame.compact\u0026#34;, \u0026#34;gitlens.blame.separateLines\u0026#34;, \u0026#34;gitlens.codeLens.authors.enabled\u0026#34;, \u0026#34;gitlens.views.repositories.files.layout\u0026#34;, \u0026#34;gitlens.views.repositories.compact\u0026#34;, \u0026#34;gitlens.defaultDateLocale\u0026#34;, \u0026#34;gitlens.defaultDateFormat\u0026#34;, \u0026#34;gitlens.defaultDateStyle\u0026#34;, \u0026#34;gitlens.advanced.messages\u0026#34;, \u0026#34;gitlens.gitCommands.search.showResultsInSideBar\u0026#34;, \u0026#34;gitlens.advanced.fileHistoryShowAllBranches\u0026#34; ], //------------------------------------------------------------------------------------------------------------ // //---通用设置--- // //------------------工作台------------------ \u0026#34;workbench.colorTheme\u0026#34;: \u0026#34;Eva Dark\u0026#34;, //颜色主题 \u0026#34;workbench.iconTheme\u0026#34;: \u0026#34;vscode-icons-mac\u0026#34;, //工作台图标主题 \u0026#34;workbench.productIconTheme\u0026#34;: \u0026#34;fluent-icons\u0026#34;, //工作台产品图标主题 \u0026#34;workbench.startupEditor\u0026#34;: \u0026#34;newUntitledFile\u0026#34;, //在没有从上一会话中恢复出信息的情况下，控制启动时显示的编辑器 \u0026#34;workbench.list.smoothScrolling\u0026#34;: true, //列表和树视图启用平滑滚动 \u0026#34;workbench.tree.indent\u0026#34;: 14, //树缩进14pix \u0026#34;workbench.editor.highlightModifiedTabs\u0026#34;: false, //在修改后未保存的文件上方只显示点 \u0026#34;workbench.editor.pinnedTabsOnSeparateRow\u0026#34;: true, //固定的选项卡出现在顶端 \u0026#34;workbench.editor.wrapTabs\u0026#34;: true, //选项卡换行 \u0026#34;workbench.editor.empty.hint\u0026#34;: \u0026#34;hidden\u0026#34;, //隐藏在没有打开编辑器时显示的提示信息 \u0026#34;workbench.editor.enablePreview\u0026#34;: true, //启用预览编辑器 \u0026#34;workbench.activityBar.location\u0026#34;: \u0026#34;top\u0026#34;, //活动栏位置：顶部 \u0026#34;workbench.editorAssociations\u0026#34;: { //编辑器关联 \u0026#34;*.copilotmd\u0026#34;: \u0026#34;vscode.markdown.preview.editor\u0026#34;, //使用markdown预览编辑器打开.copilotmd文件 \u0026#34;*.md\u0026#34;: \u0026#34;default\u0026#34;, //使用默认编辑器打开.md文件 \u0026#34;{git,gitlens}:/**/*.{md,csv,svg}\u0026#34;: \u0026#34;default\u0026#34; //使用默认编辑器打开git和gitlens扩展中的.md、.csv、.svg文件 }, \u0026#34;workbench.reduceMotion\u0026#34;: \u0026#34;on\u0026#34;, //减少动画 // // //------------------文本编辑器------------------ \u0026#34;editor.accessibilitySupport\u0026#34;: \u0026#34;off\u0026#34;, //UI关闭屏幕阅读器优化 \u0026#34;editor.codeLensFontFamily\u0026#34;: \u0026#34;\u0026#39;Cascadia Code PL\u0026#39;\u0026#34;, //CodeLens（提示）字体 \u0026#34;editor.codeLensFontSize\u0026#34;: 13, //CodeLens字号 \u0026#34;editor.cursorBlinking\u0026#34;: \u0026#34;smooth\u0026#34;, //光标闪烁：平滑 \u0026#34;editor.cursorSurroundingLines\u0026#34;: 14, //光标周围始终可见x行 \u0026#34;editor.fontFamily\u0026#34;: \u0026#34;\u0026#39;MonoLisa Nerd Font\u0026#39;, \u0026#39;Cascadia Code PL\u0026#39;, \u0026#39;SF Pro Text\u0026#39;, \u0026#39;Jetbrains Mono\u0026#39;, \u0026#39;Fira Code\u0026#39;, monospace\u0026#34;, //字体 \u0026#34;editor.fontLigatures\u0026#34;: true, //启用字体连字 \u0026#34;editor.fontSize\u0026#34;: 14, //编辑器字号 \u0026#34;editor.fontWeight\u0026#34;: \u0026#34;300\u0026#34;, //编辑器字体粗细 \u0026#34;editor.lineHeight\u0026#34;: 1.5, //编辑器行高 \u0026#34;editor.formatOnPaste\u0026#34;: true, //粘贴内容时自动格式化代码 \u0026#34;editor.formatOnSave\u0026#34;: true, //保存文件时自动格式化代码 \u0026#34;editor.gotoLocation.multipleDeclarations\u0026#34;: \u0026#34;goto\u0026#34;, //代码导航时直接跳转到第一个声明 \u0026#34;editor.gotoLocation.multipleDefinitions\u0026#34;: \u0026#34;goto\u0026#34;, //代码导航时直接跳转到第一个定义 \u0026#34;editor.guides.bracketPairs\u0026#34;: true, //显示括号对齐的指引线 \u0026#34;editor.guides.indentation\u0026#34;: false, //不显示缩进的指引线 \u0026#34;editor.inlayHints.enabled\u0026#34;: \u0026#34;off\u0026#34;, //关闭内联提示 \u0026#34;editor.linkedEditing\u0026#34;: true, //启用联动编辑 \u0026#34;editor.multiCursorModifier\u0026#34;: \u0026#34;ctrlCmd\u0026#34;, //多光标操作辅助键设置为ctrl \u0026#34;editor.quickSuggestions\u0026#34;: { \u0026#34;comments\u0026#34;: \u0026#34;on\u0026#34;, //开启注释快速建议 \u0026#34;strings\u0026#34;: \u0026#34;on\u0026#34; //开启字符串快速建议 }, \u0026#34;editor.quickSuggestionsDelay\u0026#34;: 0, //立即显示快速建议 \u0026#34;editor.renderWhitespace\u0026#34;: \u0026#34;none\u0026#34;, //不渲染空白字符 \u0026#34;editor.smoothScrolling\u0026#34;: true, //启用平滑滚动 \u0026#34;editor.snippetSuggestions\u0026#34;: \u0026#34;top\u0026#34;, //在建议列表的顶部显示代码片段建议 \u0026#34;editor.suggest.insertMode\u0026#34;: \u0026#34;replace\u0026#34;, //建议插入模式：替换 \u0026#34;editor.suggest.preview\u0026#34;: false, //不预览建议 \u0026#34;editor.suggestFontSize\u0026#34;: 13, //控制建议列表字号 \u0026#34;editor.tokenColorCustomizations\u0026#34;: { //自定义语法高亮 \u0026#34;textMateRules\u0026#34;: [ { \u0026#34;scope\u0026#34;: \u0026#34;comment\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;fontStyle\u0026#34;: \u0026#34;italic\u0026#34; //所有语言的注释部分将以斜体显示 } } ] }, \u0026#34;editor.unicodeHighlight.allowedLocales\u0026#34;: { \u0026#34;zh-hans\u0026#34;: true, //简体中文环境，允许使用 Unicode 字符，不会被高亮显示 \u0026#34;zh-hant\u0026#34;: true //繁体中文环境，允许使用 Unicode 字符，不会被高亮显示 }, \u0026#34;editor.acceptSuggestionOnEnter\u0026#34;: \u0026#34;smart\u0026#34;, //智能接受建议 \u0026#34;editor.bracketPairColorization.enabled\u0026#34;: true, //启用括号对颜色化 \u0026#34;editor.wordWrap\u0026#34;: \u0026#34;bounded\u0026#34;, //在视区宽度和 \u0026#34;Editor: Word Wrap Column\u0026#34; 中的较小值处折行。 \u0026#34;editor.wordWrapColumn\u0026#34;: 240, //编辑器窗口宽度大于x列时，自动换行 \u0026#34;editor.mouseWheelZoom\u0026#34;: false, //关闭鼠标滚轮缩放字体大小 \u0026#34;editor.suggest.snippetsPreventQuickSuggestions\u0026#34;: false, //控制活动代码段不阻止快速建议 \u0026#34;editor.suggestSelection\u0026#34;: \u0026#34;recentlyUsedByPrefix\u0026#34;, //代码补全列表中，优先选择最近的建议 \u0026#34;editor.stickyScroll.enabled\u0026#34;: true, //父级自动吸附置顶 \u0026#34;editor.wordSeparators\u0026#34;: \u0026#34;`~!@%^\u0026amp;*()=+[{]}\\\\|;:\u0026#39;\\\u0026#34;,.\u0026lt;\u0026gt;/?（），。；：\u0026#34;, //双击选中被截断字符 \u0026#34;editor.dragAndDrop\u0026#34;: false, //关闭拖拽移动代码 \u0026#34;editor.showFoldingControls\u0026#34;: \u0026#34;always\u0026#34;, //在行号槽中始终显示折叠控件 \u0026#34;editor.hover.above\u0026#34;: false, //鼠标指针悬停在代码元素上时，悬停提示将显示在鼠标指针的下方 \u0026#34;editor.hover.hidingDelay\u0026#34;: 0, //鼠标指针从悬停提示移开后，悬停提示立即消失 \u0026#34;editor.scrollbar.verticalScrollbarSize\u0026#34;: 12, //垂直滚动条的宽度 \u0026#34;editor.unicodeHighlight.nonBasicASCII\u0026#34;: false, //禁用非基本 ASCII 字符高亮 \u0026#34;editor.minimap.maxColumn\u0026#34;: 40, //侧边缩略图最大列数 // // //------------------文件资源管理器------------------ \u0026#34;explorer.confirmDelete\u0026#34;: false, //删除文件时不显示确认对话框 \u0026#34;explorer.enableDragAndDrop\u0026#34;: false, //禁用鼠标拖放文件 \u0026#34;explorer.confirmDragAndDrop\u0026#34;: false, //拖放文件时不显示确认对话框 \u0026#34;explorer.fileNesting.enabled\u0026#34;: true, //启用文件嵌套 \u0026#34;explorer.autoReveal\u0026#34;: true, //打开文件时自动展开文件夹 // // //------------------文件------------------ \u0026#34;files.autoGuessEncoding\u0026#34;: true, //自动保存 \u0026#34;files.autoSaveDelay\u0026#34;: 1000, //在最后一次编辑后x秒自动保存 \u0026#34;files.eol\u0026#34;: \u0026#34;\\n\u0026#34;, //使用换行符（LF）作为行尾字符 \u0026#34;files.exclude\u0026#34;: { //文件资源管理器排除目录 \u0026#34;**/.idea\u0026#34;: true, \u0026#34;**/__pycache__\u0026#34;: true, \u0026#34;**/.DS_Store\u0026#34;: true, }, \u0026#34;files.trimFinalNewlines\u0026#34;: true, //保存文件时自动删除文件末尾的多余换行符 \u0026#34;files.trimTrailingWhitespace\u0026#34;: true, //保存文件时自动删除行尾的多余空白字符 \u0026#34;files.insertFinalNewline\u0026#34;: true, //保存文件时自动插入最后一行的换行符 \u0026#34;files.refactoring.autoSave\u0026#34;: true, //重命名文件时自动保存 \u0026#34;files.watcherExclude\u0026#34;: { //文件监视器排除目录 \u0026#34;**/node_modules/**\u0026#34;: true, \u0026#34;**/dist/**\u0026#34;: true, \u0026#34;**/.idea/**\u0026#34;: true }, \u0026#34;files.hotExit\u0026#34;: \u0026#34;onExitAndWindowClose\u0026#34;, //关闭窗口时保存所有文件 // // //------------------终端------------------ \u0026#34;terminal.integrated.fontSize\u0026#34;: 13, //集成终端字号 \u0026#34;terminal.integrated.fontWeight\u0026#34;: \u0026#34;300\u0026#34;, //集成终端 \u0026#34;terminal.integrated.stickyScroll.enabled\u0026#34;: false, //终端命令置顶 \u0026#34;terminal.integrated.gpuAcceleration\u0026#34;: \u0026#34;on\u0026#34;, //使用GPU加速 \u0026#34;terminal.integrated.defaultLocation\u0026#34;: \u0026#34;editor\u0026#34;, //终端默认位置：编辑器 \u0026#34;terminal.integrated.enableMultiLinePasteWarning\u0026#34;: \u0026#34;never\u0026#34;, //关闭多行粘贴警告 \u0026#34;terminal.integrated.smoothScrolling\u0026#34;: true, //终端平滑滚动 \u0026#34;terminal.integrated.defaultProfile.linux\u0026#34;: \u0026#34;zsh\u0026#34;, //默认终端shell：zsh \u0026#34;terminal.integrated.scrollback\u0026#34;: 1500, //终端滚动条最大行数 // // //------------------其他自带设置------------------ \u0026#34;breadcrumbs.icons\u0026#34;: false, //目录导航不显示文件/文件夹图标 \u0026#34;notebook.breadcrumbs.showCodeCells\u0026#34;: false, //面包屑导航中不显示代码单元格 \u0026#34;notebook.output.fontFamily\u0026#34;: \u0026#34;\u0026#39;Cascadia Code PL\u0026#39;\u0026#34;, //笔记本输出区域字体 \u0026#34;notebook.output.fontSize\u0026#34;: 14, //笔记本输出区域字号 \u0026#34;search.exclude\u0026#34;: { //搜索排除目录 \u0026#34;**/.git\u0026#34;: true, \u0026#34;**/.svn\u0026#34;: true, \u0026#34;**/.vscode\u0026#34;: true, \u0026#34;**/.gitignore\u0026#34;: true, \u0026#34;**/node_modules\u0026#34;: true, \u0026#34;**/dist\u0026#34;: true, \u0026#34;**/build\u0026#34;: true, \u0026#34;**/*.lock\u0026#34;: true }, \u0026#34;search.searchEditor.singleClickBehaviour\u0026#34;: \u0026#34;peekDefinition\u0026#34;, //单击搜索结果时，在上下文内查看定义 \u0026#34;search.followSymlinks\u0026#34;: false, //关闭搜索中跟踪符号链接 \u0026#34;search.collapseResults\u0026#34;: \u0026#34;auto\u0026#34;, //搜索结果自动折叠 \u0026#34;search.showLineNumbers\u0026#34;: true, //搜索结果显示行号 \u0026#34;scm.inputFontSize\u0026#34;: 13, //源代码管理字号 \u0026#34;window.dialogStyle\u0026#34;: \u0026#34;custom\u0026#34;, //使用VSCode自定义的对话框样式 \u0026#34;window.density.editorTabHeight\u0026#34;: \u0026#34;compact\u0026#34;, //紧凑布局选项卡 \u0026#34;window.restoreWindows\u0026#34;: \u0026#34;none\u0026#34;, //窗口恢复 \u0026#34;window.newWindowProfile\u0026#34;: \u0026#34;默认\u0026#34;, //新窗口配置文件(不同步到其他配置文件) \u0026#34;window.customTitleBarVisibility\u0026#34;: \u0026#34;never\u0026#34;, //隐藏标题栏 \u0026#34;extensions.ignoreRecommendations\u0026#34;: true, //忽略推荐的扩展 \u0026#34;update.mode\u0026#34;: \u0026#34;manual\u0026#34;, //VS Code手动更新 \u0026#34;[jsonc]\u0026#34;: { //jsonc文件格式化 \u0026#34;editor.defaultFormatter\u0026#34;: \u0026#34;vscode.json-language-features\u0026#34; }, \u0026#34;security.workspace.trust.untrustedFiles\u0026#34;: \u0026#34;open\u0026#34;, //打开不受信任的文件 \u0026#34;git.openRepositoryInParentFolders\u0026#34;: \u0026#34;always\u0026#34;, //在父文件夹中打开仓库 \u0026#34;git.enableSmartCommit\u0026#34;: true, // \u0026#34;extensions.autoUpdate\u0026#34;: false, //禁用自动更新扩展 // // //------------------插件：Error Lens------------------ \u0026#34;errorLens.enabledDiagnosticLevels\u0026#34;: [ \u0026#34;warning\u0026#34;, //启用警告级别的诊断 \u0026#34;error\u0026#34; //启用错误级别的诊断 ], \u0026#34;errorLens.excludeBySource\u0026#34;: [ \u0026#34;cSpell\u0026#34;, //排除 cSpell 产生的诊断信息 \u0026#34;Grammarly\u0026#34;, //排除 Grammarly 产生的诊断信息 ], \u0026#34;errorLens.fontSize\u0026#34;: \u0026#34;15\u0026#34;, //ErrorLens字号 \u0026#34;errorLens.fontWeight\u0026#34;: \u0026#34;300\u0026#34;, //ErrorLens字体粗细 // // //------------------插件：GitHub Copilot及Chat------------------ \u0026#34;github.copilot.enable\u0026#34;: { \u0026#34;*\u0026#34;: true, //启用github copilot \u0026#34;markdown\u0026#34;: true, //启用github copilot的markdown支持 \u0026#34;plaintext\u0026#34;: true, //启用github copilot的纯文本支持 \u0026#34;scminput\u0026#34;: true //启用github copilot的源代码管理输入支持 }, \u0026#34;github.copilot.chat.localeOverride\u0026#34;: \u0026#34;zh-CN\u0026#34;, //聊天窗口语言：简体中文 // // //=== 官方 === \u0026#34;github.copilot.advanced\u0026#34;: { \u0026#34;authProvider\u0026#34;: \u0026#34;github\u0026#34; }, // // //------------------插件：Comment Translate\u0026amp;Deeplx comment translate------------------ \u0026#34;commentTranslate.targetLanguage\u0026#34;: \u0026#34;zh-CN\u0026#34;, //翻译目标语言：简体中文 \u0026#34;commentTranslate.hover.string\u0026#34;: true, //悬停翻译字符串 \u0026#34;commentTranslate.multiLineMerge\u0026#34;: true, //多行合并翻译 \u0026#34;commentTranslate.source\u0026#34;: \u0026#34;deeplx-comment-translate.deeplx-comment-translate-deeplx\u0026#34;, //翻译源：deeplx-comment-translate \u0026#34;commentTranslate.maxTranslationLength\u0026#34;: 10000, //最大翻译长度：看作无上限 \u0026#34;deeplxTranslate.authKey\u0026#34;: \u0026#34;填上你的deeplx key\u0026#34;, //deeplx翻译插件的API密钥 // // //------------------插件：Vscode Office------------------ \u0026#34;vscode-office.editorTheme\u0026#34;: \u0026#34;Auto\u0026#34;, //编辑器主题 \u0026#34;vscode-office.openOutline\u0026#34;: false, //打开大纲 // // //------------------插件：gitlens------------------ \u0026#34;gitlens.currentLine.enabled\u0026#34;: false, //关闭gitlens当前行信息 \u0026#34;gitlens.blame.format\u0026#34;: \u0026#34;${author|7} ${agoOrDate|14-relative} ${message|50}\u0026#34;, //gitlens blame信息格式：作者 日期 消息 \u0026#34;gitlens.hovers.currentLine.over\u0026#34;: \u0026#34;line\u0026#34;, //gitlens当前行悬停信息显示在行上 \u0026#34;gitlens.hovers.enabled\u0026#34;: true, //启用gitlens悬停信息 \u0026#34;gitlens.hovers.avatars\u0026#34;: false, //关闭gitlens头像 \u0026#34;gitlens.blame.compact\u0026#34;: false, //关闭gitlens紧凑模式 \u0026#34;gitlens.blame.separateLines\u0026#34;: true, //gitlens blame信息分行显示 \u0026#34;gitlens.codeLens.authors.enabled\u0026#34;: false, //关闭gitlens代码镜头作者信息 \u0026#34;gitlens.views.repositories.files.layout\u0026#34;: \u0026#34;tree\u0026#34;, //gitlens文件布局：树形 \u0026#34;gitlens.views.repositories.compact\u0026#34;: true, //gitlens仓库视图紧凑模式 \u0026#34;gitlens.defaultDateLocale\u0026#34;: \u0026#34;zh-CN\u0026#34;, //gitlens默认日期语言：简体中文 \u0026#34;gitlens.defaultDateFormat\u0026#34;: \u0026#34;YYYY-MM-DD HH:mm\u0026#34;, //gitlens默认日期格式 \u0026#34;gitlens.defaultDateStyle\u0026#34;: \u0026#34;absolute\u0026#34;, //gitlens默认日期样式 \u0026#34;gitlens.advanced.messages\u0026#34;: { //gitlens高级消息 \u0026#34;suppressCommitHasNoPreviousCommitWarning\u0026#34;: true, //抑制提交没有上一个提交的警告 }, \u0026#34;gitlens.gitCommands.search.showResultsInSideBar\u0026#34;: true, //gitlens搜索结果显示在侧边栏 \u0026#34;gitlens.advanced.fileHistoryShowAllBranches\u0026#34;: true, //gitlens文件历史显示所有分支 } } 在复制粘贴完上面内容后，主要需要修改以下自定义配置（主要是字体和插件API）：\neditor.codeLensFontFamily：CodeLens（提示）字体 editor.fontFamily：字体 editor.fontSize：字号 terminal.integrated.fontSize：终端字号 notebook.output.fontFamily：笔记本输出区域字体 scm.inputFontSize：源代码管理字号 errorLens.fontSize：ErrorLens插件字号 github.copilot.advanced和github-enterprise.uri：GitHub Copilot插件的外部API设置（如果是官方copilot，可以不设置） deeplxTranslate.authKey：deeplx翻译插件的API密钥 2.3 vscode 基础快捷键配置 # 按快捷键Ctrl+Shift+P，在输入框内输入keyboard json，选中Preferences: Open Keyboard Shortcuts (JSON),此时会有一个keybindings.json文件被打开，修改其内容为下面内容\n[ { //终端复制 \u0026#34;key\u0026#34;: \u0026#34;ctrl+c\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;workbench.action.terminal.copySelection\u0026#34;, \u0026#34;when\u0026#34;: \u0026#34;terminalTextSelectedInFocused || terminalFocus \u0026amp;\u0026amp; terminalHasBeenCreated \u0026amp;\u0026amp; terminalTextSelected || terminalFocus \u0026amp;\u0026amp; terminalProcessSupported \u0026amp;\u0026amp; terminalTextSelected || terminalFocus \u0026amp;\u0026amp; terminalTextSelected \u0026amp;\u0026amp; terminalTextSelectedInFocused || terminalHasBeenCreated \u0026amp;\u0026amp; terminalTextSelected \u0026amp;\u0026amp; terminalTextSelectedInFocused || terminalProcessSupported \u0026amp;\u0026amp; terminalTextSelected \u0026amp;\u0026amp; terminalTextSelectedInFocused\u0026#34; }, { //终端粘贴 \u0026#34;key\u0026#34;: \u0026#34;ctrl+v\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;workbench.action.terminal.paste\u0026#34;, \u0026#34;when\u0026#34;: \u0026#34;terminalFocus \u0026amp;\u0026amp; terminalHasBeenCreated || terminalFocus \u0026amp;\u0026amp; terminalProcessSupported\u0026#34; }, { //切换配置文件 \u0026#34;key\u0026#34;: \u0026#34;ctrl+shift+[\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;workbench.profiles.actions.switchProfile\u0026#34; }, { //显示远程菜单 \u0026#34;key\u0026#34;: \u0026#34;ctrl+shift+]\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;workbench.action.remote.showMenu\u0026#34; }, ] 3. vscode C++开发配置和插件 # 先按快捷键Ctrl+Shift+P，在输入框内输入new profile，选中Profiles: New Profile，此时会有一个配置文件页面打开，修改新出现的配置文件名称为C++；图标选一个喜欢的；复制自为无；Contents里面键盘快捷方式选择源自默认、其他都选择源自无，最后点击创建。\n再按快捷键Ctrl+Shift+[，选择C++（之前设置的配置文件名称），此时vscode会自动切换到C++配置文件，接下来的配置都是基于C++配置文件的。\n3.1 vscode C++开发插件 # 和之前一样，进入vscode，点击扩展，依次输入下列内容安装显示的第一个插件\nxaver.clang-format：使用.clang-format文件进行代码格式化 llvm-vs-code-extensions.vscode-clangd：clangd插件 vadimcn.vscode-lldb：lldb调试插件 ajshort.include-autocomplete：头文件自动补全 tboox.xmake-vscode：xmake构建系统 alefragnani.project-manager：项目管理（注意：这个插件如果多个配置文件同时装，会显示全部项目） 过程中，如果插件提示你需要下载其他内容，请允许\n3.2 vscode C++开发配置 # 和之前一样，按快捷键Ctrl+Shift+P，在输入框内输入user json，选中Preferences: Open Settings (JSON),此时会有一个新的settings.json文件被打开，修改其内容为下面内容\n{ //----------------xmake设置----------------- \u0026#34;xmake.debugConfigType\u0026#34;: \u0026#34;codelldb\u0026#34;, //使用codelldb插件调试 \u0026#34;xmake.runMode\u0026#34;: \u0026#34;buildRun\u0026#34;, //运行前自动构建 \u0026#34;xmake.buildLevel\u0026#34;: \u0026#34;verbose\u0026#34;, //设置编译时输出信息级别,仅输出编译警告信息以及正常信息 \u0026#34;xmake.customDebugConfig\u0026#34;: { \u0026#34;console\u0026#34;: \u0026#34;integratedTerminal\u0026#34; // xmake调试时使用集成终端 }, // // //-----------------clangd设置----------------- \u0026#34;clangd.path\u0026#34;: \u0026#34;/usr/bin/clangd\u0026#34;, //指定 clangd 的路径 \u0026#34;clangd.arguments\u0026#34;: [ // compile_commands.json 生成文件夹 \u0026#34;--compile-commands-dir=${workspaceFolder}/.vscode\u0026#34;, // 让 Clangd 生成更详细的日志 \u0026#34;--log=verbose\u0026#34;, // 输出的 JSON 文件更美观 \u0026#34;--pretty\u0026#34;, // 全局补全 \u0026#34;--all-scopes-completion\u0026#34;, // 更详细的补全内容 \u0026#34;--completion-style=detailed\u0026#34;, // 建议风格：打包(重载函数只会给出一个建议） // 相反可以设置为detailed \u0026#34;--completion-style=bundled\u0026#34;, // 跨文件重命名变量 \u0026#34;--cross-file-rename\u0026#34;, // 允许补充头文件 \u0026#34;--header-insertion=iwyu\u0026#34;, // 输入建议中，已包含头文件的项与还未包含头文件的项会以圆点加以区分 \u0026#34;--header-insertion-decorators\u0026#34;, // 在后台自动分析文件 // 基于 complie_commands.json，生成命令 // xmake project -k compile_commands \u0026#34;--background-index\u0026#34;, // 启用 Clang-Tidy 以提供「静态检查」 \u0026#34;--clang-tidy\u0026#34;, \u0026#34;--clang-tidy-checks=cppcoreguidelines-*, performance-*, bugprone-*, misc-*, google-*, modernize-*, readability-*, portability-*\u0026#34;, // 默认格式化风格: 谷歌开源项目代码指南 // C++文件夹下.clang-format作为全部子文件夹的默认 \u0026#34;--fallback-style=file\u0026#34;, // 同时开启的任务数量 \u0026#34;-j=16\u0026#34;, // pch优化的位置(memory 或 disk，选择memory会增加内存开销，但会提升性能) 推荐在板子上使用disk \u0026#34;--pch-storage=memory\u0026#34;, // 启用这项时，补全函数时，将会给参数提供占位符，键入后按 Tab 可以切换到下一占位符，乃至函数末。我选择禁用 \u0026#34;--function-arg-placeholders=false\u0026#34;, \u0026#34;--query-driver=/usr/bin/g++*\u0026#34;, //设定 clang 编译器的路径。clangd启动时需要通过参数指定从那个目录搜索标准库头文件 \u0026#34;--completion-parse=auto\u0026#34;, //当 clangd 准备就绪时，用它来分析建议 \u0026#34;--enable-config\u0026#34;, \u0026#34;--function-arg-placeholders=true\u0026#34;, // 补全函数时，将会给参数提供占位符，键入后按 Tab 可以切换到下一占位符，乃至函数末 \u0026#34;--ranking-model=decision_forest\u0026#34;, //建议的排序方案：hueristics (启发式), decision_forest (决策树) ], \u0026#34;clangd.checkUpdates\u0026#34;: true, \u0026#34;clangd.onConfigChanged\u0026#34;: \u0026#34;restart\u0026#34;, // 重启 clangd 时重载配置,具体方法: F1 + Fn 打开命令面板，然后搜索“clangd: restart\u0026#34; // \u0026#34;clangd.serverCompletionRanking\u0026#34;: true, // 借助网上的信息排序建议 \u0026#34;clangd.detectExtensionConflicts\u0026#34;: true, // 当其它拓展与 clangd 冲突时警告并建议禁用 \u0026#34;clangd.fallbackFlags\u0026#34;: [ \u0026#34;-pedantic\u0026#34;, //启用所有警告 \u0026#34;-Wall\u0026#34;, //启用所有警告 \u0026#34;-Wextra\u0026#34;, //启用额外警告 \u0026#34;-Wcast-align\u0026#34;, //强制转换时检查对齐 \u0026#34;-Wdouble-promotion\u0026#34;, //强制转换时检查 double 类型提升 \u0026#34;-Wformat=2\u0026#34;, //检查 printf 和 scanf 函数的参数 \u0026#34;-Wimplicit-fallthrough\u0026#34;, //检查 switch 语句中的隐式 fallthrough \u0026#34;-Wmisleading-indentation\u0026#34;, //检查缩进是否误导 \u0026#34;-Wnon-virtual-dtor\u0026#34;, //检查基类析构函数是否为虚函数 \u0026#34;-Wnull-dereference\u0026#34;, //检查空指针解引用 \u0026#34;-Wold-style-cast\u0026#34;, //检查 C 风格的强制转换 \u0026#34;-Woverloaded-virtual\u0026#34;, //检查虚函数重载 \u0026#34;-Wpedantic\u0026#34;, //启用所有警告 \u0026#34;-Wshadow\u0026#34;, //检查局部变量和全局变量同名 \u0026#34;-Wunused\u0026#34;, //检查未使用的变量 \u0026#34;-pthread\u0026#34;, //启用多线程支持 \u0026#34;-fuse-ld=lld\u0026#34;, //使用 lld 作为链接器 \u0026#34;-fsanitize=address\u0026#34;, //启用地址检查 \u0026#34;-fsanitize=undefined\u0026#34;, //启用未定义行为检查 \u0026#34;-stdlib=libc++\u0026#34;, //使用 libc++ 标准库 \u0026#34;-std=c++20\u0026#34;, //使用 C++20 标准 ], // // //-----------------格式化设置----------------- \u0026#34;clang-format.executable\u0026#34;: \u0026#34;/usr/bin/clang-format\u0026#34;, //指定 clang-format 的路径 \u0026#34;[cpp]\u0026#34;: { \u0026#34;editor.defaultFormatter\u0026#34;: \u0026#34;xaver.clang-format\u0026#34;, //设置默认格式化器 }, \u0026#34;[c]\u0026#34;: { \u0026#34;editor.defaultFormatter\u0026#34;: \u0026#34;xaver.clang-format\u0026#34;, //设置默认格式化器 }, \u0026#34;files.associations\u0026#34;: { //文件关联 \u0026#34;*.cpp\u0026#34;: \u0026#34;cpp\u0026#34;, \u0026#34;*.hpp\u0026#34;: \u0026#34;cpp\u0026#34;, \u0026#34;*.h\u0026#34;: \u0026#34;cpp\u0026#34; }, // // //-----------------lldb设置----------------- \u0026#34;lldb.commandCompletions\u0026#34;: true, // LLDB 指令自动补全 \u0026#34;lldb.dereferencePointers\u0026#34;: true, // LLDB 指针显示解引用内容 \u0026#34;lldb.evaluateForHovers\u0026#34;: true, // LLDB 鼠标悬停在变量上时预览变量值 \u0026#34;lldb.launch.expressions\u0026#34;: \u0026#34;native\u0026#34;, // LLDB 监视表达式的默认类型 \u0026#34;lldb.showDisassembly\u0026#34;: \u0026#34;never\u0026#34;, // LLDB 不显示汇编代码 \u0026#34;lldb.verboseLogging\u0026#34;: true, // LLDB 输出详细日志 } 在复制粘贴完上面内容后，可能需要修改以下自定义配置：\nclangd.path：指定clangd的路径，根据自己的clangd安装路径进行修改 clang-format.executable：指定clang-format的路径，根据自己的clang-format安装路径进行修改 clangd.arguments内的-j=16：设置同时开启的任务数量，根据自己的电脑性能进行修改（可在终端输入nproc查看最高值） clangd.fallbackFlags内的-std=c++20：设置使用的C++标准 4. 额外配置 # 接下来两个文件可以放在所有在项目文件夹同级目录下，这样就可以在所有项目中使用这两个文件了。\n示例文件树：\n/home/user/Code/C++ ├── .clang-format ├── .clangd ├── project1 ├── project2 .clang-format：具体配置可以参考https://clang.llvm.org/docs/ClangFormatStyleOptions.html\n# 语言: None, Cpp, Java, JavaScript, ObjC, Proto, TableGen, TextProto Language: Cpp # BasedOnStyle: LLVM # 访问说明符(public、private等)的偏移 AccessModifierOffset: -4 # 开括号(开圆括号、开尖括号、开方括号)后的对齐: Align, DontAlign, AlwaysBreak(总是在开括号后换行) AlignAfterOpenBracket: Align # 连续赋值时，对齐所有等号 AlignConsecutiveAssignments: true # 连续声明时，对齐所有声明的变量名 AlignConsecutiveDeclarations: true # 左对齐逃脱换行(使用反斜杠换行)的反斜杠 AlignEscapedNewlinesLeft: true # 水平对齐二元和三元表达式的操作数 AlignOperands: true # 对齐连续的尾随的注释 AlignTrailingComments: true # 允许函数声明的所有参数在放在下一行 AllowAllParametersOfDeclarationOnNextLine: true # 允许短的块放在同一行 AllowShortBlocksOnASingleLine: false # 允许短的case标签放在同一行 AllowShortCaseLabelsOnASingleLine: false # 允许短的函数放在同一行: None, InlineOnly(定义在类中), Empty(空函数), Inline(定义在类中，空函数), All AllowShortFunctionsOnASingleLine: Empty # 允许短的if语句保持在同一行 AllowShortIfStatementsOnASingleLine: false # 允许短的循环保持在同一行 AllowShortLoopsOnASingleLine: false # 总是在定义返回类型后换行(deprecated) AlwaysBreakAfterDefinitionReturnType: None # 总是在返回类型后换行: None, All, TopLevel(顶级函数，不包括在类中的函数), # AllDefinitions(所有的定义，不包括声明), TopLevelDefinitions(所有的顶级函数的定义) AlwaysBreakAfterReturnType: None # 总是在多行string字面量前换行 AlwaysBreakBeforeMultilineStrings: false # 总是在template声明后换行 AlwaysBreakTemplateDeclarations: false # false表示函数实参要么都在同一行，要么都各自一行 BinPackArguments: true # false表示所有形参要么都在同一行，要么都各自一行 BinPackParameters: true # 大括号换行，只有当BreakBeforeBraces设置为Custom时才有效 BraceWrapping: # class定义后面 AfterClass: false # 控制语句后面 AfterControlStatement: false # enum定义后面 AfterEnum: false # 函数定义后面 AfterFunction: false # 命名空间定义后面 AfterNamespace: false # ObjC定义后面 AfterObjCDeclaration: false # struct定义后面 AfterStruct: false # union定义后面 AfterUnion: false # catch之前 BeforeCatch: true # else之前 BeforeElse: true # 缩进大括号 IndentBraces: false # 在二元运算符前换行: None(在操作符后换行), NonAssignment(在非赋值的操作符前换行), All(在操作符前换行) BreakBeforeBinaryOperators: NonAssignment # 在大括号前换行: Attach(始终将大括号附加到周围的上下文), Linux(除函数、命名空间和类定义，与Attach类似), # Mozilla(除枚举、函数、记录定义，与Attach类似), Stroustrup(除函数定义、catch、else，与Attach类似), # Allman(总是在大括号前换行), GNU(总是在大括号前换行， # 并对于控制语句的大括号增加额外的缩进), WebKit(在函数前换行), Custom # 注：这里认为语句块也属于函数 BreakBeforeBraces: Allman # 在三元运算符前换行 BreakBeforeTernaryOperators: true # 在构造函数的初始化列表的逗号前换行 BreakConstructorInitializersBeforeComma: false # 每行字符的限制，0表示没有限制 ColumnLimit: 200 # 描述具有特殊意义的注释的正则表达式，它不应该被分割为多行或以其它方式改变 CommentPragmas: \u0026#39;^ IWYU pragma:\u0026#39; # 构造函数的初始化列表要么都在同一行，要么都各自一行 ConstructorInitializerAllOnOneLineOrOnePerLine: false # 构造函数的初始化列表的缩进宽度 ConstructorInitializerIndentWidth: 4 # 延续的行的缩进宽度 ContinuationIndentWidth: 4 # 去除C++11的列表初始化的大括号{后和}前的空格 Cpp11BracedListStyle: false # 继承最常用的指针和引用的对齐方式 DerivePointerAlignment: false # 关闭格式化 DisableFormat: false # 自动检测函数的调用和定义是否被格式为每行一个参数(Experimental) ExperimentalAutoDetectBinPacking: false # 需要被解读为foreach循环而不是函数调用的宏 ForEachMacros: [ foreach, Q_FOREACH, BOOST_FOREACH ] # 对#include进行排序，匹配了某正则表达式的#include拥有对应的优先级， # 匹配不到的则默认优先级为INT_MAX(优先级越小排序越靠前)， # 可以定义负数优先级从而保证某些#include永远在最前面 IncludeCategories: - Regex: \u0026#39;^\u0026#34;(llvm|llvm-c|clang|clang-c)/\u0026#39; Priority: 2 - Regex: \u0026#39;^(\u0026lt;|\u0026#34;(gtest|isl|json)/)\u0026#39; Priority: 3 - Regex: \u0026#39;.*\u0026#39; Priority: 1 # 缩进case标签 IndentCaseLabels: false # 缩进宽度 IndentWidth: 4 # 函数返回类型换行时，缩进函数声明或函数定义的函数名 IndentWrappedFunctionNames: false # 保留在块开始处的空行 KeepEmptyLinesAtTheStartOfBlocks: true # 开始一个块的宏的正则表达式 MacroBlockBegin: \u0026#39;\u0026#39; # 结束一个块的宏的正则表达式 MacroBlockEnd: \u0026#39;\u0026#39; # 连续空行的最大数量 MaxEmptyLinesToKeep: 1 # 命名空间的缩进: None, Inner(缩进嵌套的命名空间中的内容), All NamespaceIndentation: Inner # 使用ObjC块时缩进宽度 ObjCBlockIndentWidth: 4 # 在ObjC的@property后添加一个空格 ObjCSpaceAfterProperty: false # 在ObjC的protocol列表前添加一个空格 ObjCSpaceBeforeProtocolList: true # 在call(后对函数调用换行的penalty PenaltyBreakBeforeFirstCallParameter: 19 # 在一个注释中引入换行的penalty PenaltyBreakComment: 300 # 第一次在\u0026lt;\u0026lt;前换行的penalty PenaltyBreakFirstLessLess: 120 # 在一个字符串字面量中引入换行的penalty PenaltyBreakString: 1000 # 对于每个在行字符数限制之外的字符的penalty PenaltyExcessCharacter: 1000000 # 将函数的返回类型放到它自己的行的penalty PenaltyReturnTypeOnItsOwnLine: 60 # 指针和引用的对齐: Left, Right, Middle PointerAlignment: Left # 允许重新排版注释 ReflowComments: true # 允许排序#include SortIncludes: true # 在C风格类型转换后添加空格 SpaceAfterCStyleCast: false # 在赋值运算符之前添加空格 SpaceBeforeAssignmentOperators: true # 开圆括号之前添加一个空格: Never, ControlStatements, Always SpaceBeforeParens: ControlStatements # 在空的圆括号中添加空格 SpaceInEmptyParentheses: false # 在尾随的评论前添加的空格数(只适用于//) SpacesBeforeTrailingComments: 2 # 在尖括号的\u0026lt;后和\u0026gt;前添加空格 SpacesInAngles: false # 在容器(ObjC和JavaScript的数组和字典等)字面量中添加空格 SpacesInContainerLiterals: true # 在C风格类型转换的括号中添加空格 SpacesInCStyleCastParentheses: true # 在圆括号的(后和)前添加空格 SpacesInParentheses: false # 在方括号的[后和]前添加空格，lamda表达式和未指明大小的数组的声明不受影响 SpacesInSquareBrackets: false # 标准: Cpp03, Cpp11, Auto Standard: Cpp11 # tab宽度 TabWidth: 4 # 使用tab字符: Never, ForIndentation, ForContinuationAndIndentation, Always UseTab: Never .clangd：具体配置可以参考https://clang.llvm.org/extra/clang-tidy/\nIndex: Background: Build Diagnostics: ClangTidy: Add: [\u0026#34;*\u0026#34;] Remove: [ abseil*, fuchsia*, llvmlib*, zircon*, altera*, google-readability-todo, readability-braces-around-statements, hicpp-braces-around-statements, hicpp-signed-bitwise, modernize-use-trailing-return-type, readability-identifier-length, cppcoreguidelines-avoid-magic-numbers, readability-magic-numbers, bugprone-easily-swappable-parameters, ] 5. 项目使用测试 # 这里直接给出测试文件（C++的基础上测试opencv库、fmt库、eigen库使用，如果不需要，请手动去除对应部分）\n先新建项目文件夹，然后在项目文件夹下，依次保存下面文件：\nxmake.lua\nadd_rules(\u0026#34;mode.debug\u0026#34;, \u0026#34;mode.release\u0026#34;) set_toolchains(\u0026#34;clang\u0026#34;) set_languages(\u0026#34;c99\u0026#34;, \u0026#34;c++20\u0026#34;) add_rules(\u0026#34;plugin.compile_commands.autoupdate\u0026#34;, {outputdir = \u0026#34;.vscode\u0026#34;}) add_requires(\u0026#34;opencv\u0026#34;, {system = false ,configs = {shared = true, gtk = true}}) add_requires(\u0026#34;fmt\u0026#34;) add_requires(\u0026#34;eigen\u0026#34;) target(\u0026#34;template\u0026#34;) set_kind(\u0026#34;binary\u0026#34;) add_files(\u0026#34;src/*.cpp\u0026#34;) add_packages(\u0026#34;opencv\u0026#34;) add_packages(\u0026#34;fmt\u0026#34;) add_packages(\u0026#34;eigen\u0026#34;) src文件夹内main.cpp\n#include \u0026lt;Eigen/Dense\u0026gt; #include \u0026lt;fmt/format.h\u0026gt; #include \u0026lt;opencv2/opencv.hpp\u0026gt; int main() { std::cout \u0026lt;\u0026lt; \u0026#34;[成功]：std库测试：hello world!\u0026#34; \u0026lt;\u0026lt; std::endl; Eigen::MatrixXd matrix1(2, 2); matrix1(0, 0) = 1; matrix1(0, 1) = 2; matrix1(1, 0) = 3; matrix1(1, 1) = 4; std::cout \u0026lt;\u0026lt; \u0026#34;[成功]：Eigen库矩阵测试：matrix1 = \u0026#34; \u0026lt;\u0026lt; std::endl \u0026lt;\u0026lt; matrix1 \u0026lt;\u0026lt; std::endl; fmt::print(\u0026#34;[{}]：fmt库测试：输出\\n\u0026#34;, \u0026#34;成功\u0026#34;); cv::Mat image = cv::imread(\u0026#34;../../../../data/1.jpg\u0026#34;); cv::imshow(\u0026#34;[成功]：OpenCV库测试：显示\u0026#34;, image); fmt::print(\u0026#34;按任意键退出..\\n\u0026#34;); cv::waitKey(0); return 0; } 然后在项目文件夹下新建data文件夹，放入一张名为1.jpg的图片\n5.1 编译 # 在vscode下方状态栏的XMake（扩展）中将Set build mode设置为debug；change the toolchain设置为clang\n然后看到Build the given target，点击编译\n第一次编译xmake需要安装外部库，一路选y就可以。\n5.2 运行 # 在编译完成后，点击Run the given target，即可运行\n5.3 调试 # 在编译完成后，点击Debug the given target，即可调试\n可以打几个断点，然后调试\n参考资料 # 点击展开查看参考资料 https://www.cnblogs.com/guoxuanhan/p/17864923.html ","date":"2024年11月12日","externalUrl":null,"permalink":"/posts/linux%E5%B9%B3%E5%8F%B0c++%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE/","section":"文章","summary":"","title":"ArchLinux平台 C/C++开发配置","type":"posts"},{"content":"","date":"2024年11月12日","externalUrl":null,"permalink":"/tags/c++/","section":"Tags","summary":"","title":"C++","type":"tags"},{"content":"","date":"2024年11月12日","externalUrl":null,"permalink":"/tags/clangd/","section":"Tags","summary":"","title":"Clangd","type":"tags"},{"content":"","date":"2024年11月12日","externalUrl":null,"permalink":"/tags/lldb/","section":"Tags","summary":"","title":"Lldb","type":"tags"},{"content":"","date":"2024年11月12日","externalUrl":null,"permalink":"/tags/vscode/","section":"Tags","summary":"","title":"Vscode","type":"tags"},{"content":"","date":"2024年11月12日","externalUrl":null,"permalink":"/tags/xmake/","section":"Tags","summary":"","title":"Xmake","type":"tags"},{"content":"","date":"2024年11月12日","externalUrl":null,"permalink":"/categories/%E4%BB%A3%E7%A0%81/","section":"分类","summary":"","title":"代码","type":"categories"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"分类","summary":"","title":"分类","type":"categories"},{"content":"","externalUrl":null,"permalink":"/postgraduate/","section":"学习记录","summary":"","title":"学习记录","type":"postgraduate"},{"content":"","externalUrl":null,"permalink":"/posts/","section":"文章","summary":"","title":"文章","type":"posts"}]